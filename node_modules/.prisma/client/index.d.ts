
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model usuario
 * 
 */
export type usuario = $Result.DefaultSelection<Prisma.$usuarioPayload>
/**
 * Model comentario
 * 
 */
export type comentario = $Result.DefaultSelection<Prisma.$comentarioPayload>
/**
 * Model lugar
 * 
 */
export type lugar = $Result.DefaultSelection<Prisma.$lugarPayload>
/**
 * Model categoria
 * 
 */
export type categoria = $Result.DefaultSelection<Prisma.$categoriaPayload>
/**
 * Model producto
 * 
 */
export type producto = $Result.DefaultSelection<Prisma.$productoPayload>
/**
 * Model publicacion
 * 
 */
export type publicacion = $Result.DefaultSelection<Prisma.$publicacionPayload>
/**
 * Model orden
 * 
 */
export type orden = $Result.DefaultSelection<Prisma.$ordenPayload>
/**
 * Model compra
 * 
 */
export type compra = $Result.DefaultSelection<Prisma.$compraPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Usuarios
 * const usuarios = await prisma.usuario.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Usuarios
   * const usuarios = await prisma.usuario.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.usuario`: Exposes CRUD operations for the **usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.usuarioDelegate<ExtArgs>;

  /**
   * `prisma.comentario`: Exposes CRUD operations for the **comentario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comentarios
    * const comentarios = await prisma.comentario.findMany()
    * ```
    */
  get comentario(): Prisma.comentarioDelegate<ExtArgs>;

  /**
   * `prisma.lugar`: Exposes CRUD operations for the **lugar** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lugars
    * const lugars = await prisma.lugar.findMany()
    * ```
    */
  get lugar(): Prisma.lugarDelegate<ExtArgs>;

  /**
   * `prisma.categoria`: Exposes CRUD operations for the **categoria** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categorias
    * const categorias = await prisma.categoria.findMany()
    * ```
    */
  get categoria(): Prisma.categoriaDelegate<ExtArgs>;

  /**
   * `prisma.producto`: Exposes CRUD operations for the **producto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Productos
    * const productos = await prisma.producto.findMany()
    * ```
    */
  get producto(): Prisma.productoDelegate<ExtArgs>;

  /**
   * `prisma.publicacion`: Exposes CRUD operations for the **publicacion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Publicacions
    * const publicacions = await prisma.publicacion.findMany()
    * ```
    */
  get publicacion(): Prisma.publicacionDelegate<ExtArgs>;

  /**
   * `prisma.orden`: Exposes CRUD operations for the **orden** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ordens
    * const ordens = await prisma.orden.findMany()
    * ```
    */
  get orden(): Prisma.ordenDelegate<ExtArgs>;

  /**
   * `prisma.compra`: Exposes CRUD operations for the **compra** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Compras
    * const compras = await prisma.compra.findMany()
    * ```
    */
  get compra(): Prisma.compraDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.7.1
   * Query Engine version: 0ca5ccbcfa6bdc81c003cf549abe4269f59c41e5
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    usuario: 'usuario',
    comentario: 'comentario',
    lugar: 'lugar',
    categoria: 'categoria',
    producto: 'producto',
    publicacion: 'publicacion',
    orden: 'orden',
    compra: 'compra'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'usuario' | 'comentario' | 'lugar' | 'categoria' | 'producto' | 'publicacion' | 'orden' | 'compra'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      usuario: {
        payload: Prisma.$usuarioPayload<ExtArgs>
        fields: Prisma.usuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usuarioFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usuarioFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          findFirst: {
            args: Prisma.usuarioFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usuarioFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          findMany: {
            args: Prisma.usuarioFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>[]
          }
          create: {
            args: Prisma.usuarioCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          createMany: {
            args: Prisma.usuarioCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.usuarioDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          update: {
            args: Prisma.usuarioUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          deleteMany: {
            args: Prisma.usuarioDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.usuarioUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.usuarioUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.usuarioGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.usuarioCountArgs<ExtArgs>,
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      comentario: {
        payload: Prisma.$comentarioPayload<ExtArgs>
        fields: Prisma.comentarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.comentarioFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$comentarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.comentarioFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$comentarioPayload>
          }
          findFirst: {
            args: Prisma.comentarioFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$comentarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.comentarioFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$comentarioPayload>
          }
          findMany: {
            args: Prisma.comentarioFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$comentarioPayload>[]
          }
          create: {
            args: Prisma.comentarioCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$comentarioPayload>
          }
          createMany: {
            args: Prisma.comentarioCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.comentarioDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$comentarioPayload>
          }
          update: {
            args: Prisma.comentarioUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$comentarioPayload>
          }
          deleteMany: {
            args: Prisma.comentarioDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.comentarioUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.comentarioUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$comentarioPayload>
          }
          aggregate: {
            args: Prisma.ComentarioAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateComentario>
          }
          groupBy: {
            args: Prisma.comentarioGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ComentarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.comentarioCountArgs<ExtArgs>,
            result: $Utils.Optional<ComentarioCountAggregateOutputType> | number
          }
        }
      }
      lugar: {
        payload: Prisma.$lugarPayload<ExtArgs>
        fields: Prisma.lugarFieldRefs
        operations: {
          findUnique: {
            args: Prisma.lugarFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$lugarPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.lugarFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$lugarPayload>
          }
          findFirst: {
            args: Prisma.lugarFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$lugarPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.lugarFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$lugarPayload>
          }
          findMany: {
            args: Prisma.lugarFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$lugarPayload>[]
          }
          create: {
            args: Prisma.lugarCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$lugarPayload>
          }
          createMany: {
            args: Prisma.lugarCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.lugarDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$lugarPayload>
          }
          update: {
            args: Prisma.lugarUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$lugarPayload>
          }
          deleteMany: {
            args: Prisma.lugarDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.lugarUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.lugarUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$lugarPayload>
          }
          aggregate: {
            args: Prisma.LugarAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLugar>
          }
          groupBy: {
            args: Prisma.lugarGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LugarGroupByOutputType>[]
          }
          count: {
            args: Prisma.lugarCountArgs<ExtArgs>,
            result: $Utils.Optional<LugarCountAggregateOutputType> | number
          }
        }
      }
      categoria: {
        payload: Prisma.$categoriaPayload<ExtArgs>
        fields: Prisma.categoriaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.categoriaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.categoriaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriaPayload>
          }
          findFirst: {
            args: Prisma.categoriaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.categoriaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriaPayload>
          }
          findMany: {
            args: Prisma.categoriaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriaPayload>[]
          }
          create: {
            args: Prisma.categoriaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriaPayload>
          }
          createMany: {
            args: Prisma.categoriaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.categoriaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriaPayload>
          }
          update: {
            args: Prisma.categoriaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriaPayload>
          }
          deleteMany: {
            args: Prisma.categoriaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.categoriaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.categoriaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriaPayload>
          }
          aggregate: {
            args: Prisma.CategoriaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCategoria>
          }
          groupBy: {
            args: Prisma.categoriaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CategoriaGroupByOutputType>[]
          }
          count: {
            args: Prisma.categoriaCountArgs<ExtArgs>,
            result: $Utils.Optional<CategoriaCountAggregateOutputType> | number
          }
        }
      }
      producto: {
        payload: Prisma.$productoPayload<ExtArgs>
        fields: Prisma.productoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.productoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.productoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productoPayload>
          }
          findFirst: {
            args: Prisma.productoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.productoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productoPayload>
          }
          findMany: {
            args: Prisma.productoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productoPayload>[]
          }
          create: {
            args: Prisma.productoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productoPayload>
          }
          createMany: {
            args: Prisma.productoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.productoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productoPayload>
          }
          update: {
            args: Prisma.productoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productoPayload>
          }
          deleteMany: {
            args: Prisma.productoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.productoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.productoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productoPayload>
          }
          aggregate: {
            args: Prisma.ProductoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProducto>
          }
          groupBy: {
            args: Prisma.productoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProductoGroupByOutputType>[]
          }
          count: {
            args: Prisma.productoCountArgs<ExtArgs>,
            result: $Utils.Optional<ProductoCountAggregateOutputType> | number
          }
        }
      }
      publicacion: {
        payload: Prisma.$publicacionPayload<ExtArgs>
        fields: Prisma.publicacionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.publicacionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$publicacionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.publicacionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$publicacionPayload>
          }
          findFirst: {
            args: Prisma.publicacionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$publicacionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.publicacionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$publicacionPayload>
          }
          findMany: {
            args: Prisma.publicacionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$publicacionPayload>[]
          }
          create: {
            args: Prisma.publicacionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$publicacionPayload>
          }
          createMany: {
            args: Prisma.publicacionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.publicacionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$publicacionPayload>
          }
          update: {
            args: Prisma.publicacionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$publicacionPayload>
          }
          deleteMany: {
            args: Prisma.publicacionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.publicacionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.publicacionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$publicacionPayload>
          }
          aggregate: {
            args: Prisma.PublicacionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePublicacion>
          }
          groupBy: {
            args: Prisma.publicacionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PublicacionGroupByOutputType>[]
          }
          count: {
            args: Prisma.publicacionCountArgs<ExtArgs>,
            result: $Utils.Optional<PublicacionCountAggregateOutputType> | number
          }
        }
      }
      orden: {
        payload: Prisma.$ordenPayload<ExtArgs>
        fields: Prisma.ordenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ordenFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ordenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ordenFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ordenPayload>
          }
          findFirst: {
            args: Prisma.ordenFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ordenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ordenFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ordenPayload>
          }
          findMany: {
            args: Prisma.ordenFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ordenPayload>[]
          }
          create: {
            args: Prisma.ordenCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ordenPayload>
          }
          createMany: {
            args: Prisma.ordenCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ordenDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ordenPayload>
          }
          update: {
            args: Prisma.ordenUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ordenPayload>
          }
          deleteMany: {
            args: Prisma.ordenDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ordenUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ordenUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ordenPayload>
          }
          aggregate: {
            args: Prisma.OrdenAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateOrden>
          }
          groupBy: {
            args: Prisma.ordenGroupByArgs<ExtArgs>,
            result: $Utils.Optional<OrdenGroupByOutputType>[]
          }
          count: {
            args: Prisma.ordenCountArgs<ExtArgs>,
            result: $Utils.Optional<OrdenCountAggregateOutputType> | number
          }
        }
      }
      compra: {
        payload: Prisma.$compraPayload<ExtArgs>
        fields: Prisma.compraFieldRefs
        operations: {
          findUnique: {
            args: Prisma.compraFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$compraPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.compraFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$compraPayload>
          }
          findFirst: {
            args: Prisma.compraFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$compraPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.compraFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$compraPayload>
          }
          findMany: {
            args: Prisma.compraFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$compraPayload>[]
          }
          create: {
            args: Prisma.compraCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$compraPayload>
          }
          createMany: {
            args: Prisma.compraCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.compraDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$compraPayload>
          }
          update: {
            args: Prisma.compraUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$compraPayload>
          }
          deleteMany: {
            args: Prisma.compraDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.compraUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.compraUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$compraPayload>
          }
          aggregate: {
            args: Prisma.CompraAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCompra>
          }
          groupBy: {
            args: Prisma.compraGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CompraGroupByOutputType>[]
          }
          count: {
            args: Prisma.compraCountArgs<ExtArgs>,
            result: $Utils.Optional<CompraCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsuarioCountOutputType
   */

  export type UsuarioCountOutputType = {
    comentario: number
    lugar: number
    orden: number
    compra: number
  }

  export type UsuarioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comentario?: boolean | UsuarioCountOutputTypeCountComentarioArgs
    lugar?: boolean | UsuarioCountOutputTypeCountLugarArgs
    orden?: boolean | UsuarioCountOutputTypeCountOrdenArgs
    compra?: boolean | UsuarioCountOutputTypeCountCompraArgs
  }

  // Custom InputTypes

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     */
    select?: UsuarioCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountComentarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: comentarioWhereInput
  }


  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountLugarArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: lugarWhereInput
  }


  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountOrdenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ordenWhereInput
  }


  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountCompraArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: compraWhereInput
  }



  /**
   * Count Type ComentarioCountOutputType
   */

  export type ComentarioCountOutputType = {
    publicacion: number
  }

  export type ComentarioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    publicacion?: boolean | ComentarioCountOutputTypeCountPublicacionArgs
  }

  // Custom InputTypes

  /**
   * ComentarioCountOutputType without action
   */
  export type ComentarioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComentarioCountOutputType
     */
    select?: ComentarioCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ComentarioCountOutputType without action
   */
  export type ComentarioCountOutputTypeCountPublicacionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: publicacionWhereInput
  }



  /**
   * Count Type CategoriaCountOutputType
   */

  export type CategoriaCountOutputType = {
    producto: number
  }

  export type CategoriaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    producto?: boolean | CategoriaCountOutputTypeCountProductoArgs
  }

  // Custom InputTypes

  /**
   * CategoriaCountOutputType without action
   */
  export type CategoriaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaCountOutputType
     */
    select?: CategoriaCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CategoriaCountOutputType without action
   */
  export type CategoriaCountOutputTypeCountProductoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productoWhereInput
  }



  /**
   * Count Type ProductoCountOutputType
   */

  export type ProductoCountOutputType = {
    orden: number
  }

  export type ProductoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orden?: boolean | ProductoCountOutputTypeCountOrdenArgs
  }

  // Custom InputTypes

  /**
   * ProductoCountOutputType without action
   */
  export type ProductoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductoCountOutputType
     */
    select?: ProductoCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ProductoCountOutputType without action
   */
  export type ProductoCountOutputTypeCountOrdenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ordenWhereInput
  }



  /**
   * Models
   */

  /**
   * Model usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    id_usuario: number | null
  }

  export type UsuarioSumAggregateOutputType = {
    id_usuario: number | null
  }

  export type UsuarioMinAggregateOutputType = {
    id_usuario: number | null
    nombre: string | null
    apellido: string | null
    email: string | null
    telefono: string | null
    edad: string | null
    foto: string | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id_usuario: number | null
    nombre: string | null
    apellido: string | null
    email: string | null
    telefono: string | null
    edad: string | null
    foto: string | null
  }

  export type UsuarioCountAggregateOutputType = {
    id_usuario: number
    nombre: number
    apellido: number
    email: number
    telefono: number
    edad: number
    foto: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    id_usuario?: true
  }

  export type UsuarioSumAggregateInputType = {
    id_usuario?: true
  }

  export type UsuarioMinAggregateInputType = {
    id_usuario?: true
    nombre?: true
    apellido?: true
    email?: true
    telefono?: true
    edad?: true
    foto?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id_usuario?: true
    nombre?: true
    apellido?: true
    email?: true
    telefono?: true
    edad?: true
    foto?: true
  }

  export type UsuarioCountAggregateInputType = {
    id_usuario?: true
    nombre?: true
    apellido?: true
    email?: true
    telefono?: true
    edad?: true
    foto?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which usuario to aggregate.
     */
    where?: usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuarioOrderByWithRelationInput | usuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type usuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usuarioWhereInput
    orderBy?: usuarioOrderByWithAggregationInput | usuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: usuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    id_usuario: number
    nombre: string
    apellido: string
    email: string
    telefono: string
    edad: string
    foto: string
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends usuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type usuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_usuario?: boolean
    nombre?: boolean
    apellido?: boolean
    email?: boolean
    telefono?: boolean
    edad?: boolean
    foto?: boolean
    comentario?: boolean | usuario$comentarioArgs<ExtArgs>
    lugar?: boolean | usuario$lugarArgs<ExtArgs>
    orden?: boolean | usuario$ordenArgs<ExtArgs>
    compra?: boolean | usuario$compraArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>

  export type usuarioSelectScalar = {
    id_usuario?: boolean
    nombre?: boolean
    apellido?: boolean
    email?: boolean
    telefono?: boolean
    edad?: boolean
    foto?: boolean
  }

  export type usuarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comentario?: boolean | usuario$comentarioArgs<ExtArgs>
    lugar?: boolean | usuario$lugarArgs<ExtArgs>
    orden?: boolean | usuario$ordenArgs<ExtArgs>
    compra?: boolean | usuario$compraArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $usuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "usuario"
    objects: {
      comentario: Prisma.$comentarioPayload<ExtArgs>[]
      lugar: Prisma.$lugarPayload<ExtArgs>[]
      orden: Prisma.$ordenPayload<ExtArgs>[]
      compra: Prisma.$compraPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_usuario: number
      nombre: string
      apellido: string
      email: string
      telefono: string
      edad: string
      foto: string
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }


  type usuarioGetPayload<S extends boolean | null | undefined | usuarioDefaultArgs> = $Result.GetResult<Prisma.$usuarioPayload, S>

  type usuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<usuarioFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface usuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['usuario'], meta: { name: 'usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {usuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usuarioFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, usuarioFindUniqueArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Usuario that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {usuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usuarioFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usuarioFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usuarioFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, usuarioFindFirstArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usuarioFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usuarioFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id_usuario`
     * const usuarioWithId_usuarioOnly = await prisma.usuario.findMany({ select: { id_usuario: true } })
     * 
    **/
    findMany<T extends usuarioFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usuarioFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Usuario.
     * @param {usuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
    **/
    create<T extends usuarioCreateArgs<ExtArgs>>(
      args: SelectSubset<T, usuarioCreateArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Usuarios.
     *     @param {usuarioCreateManyArgs} args - Arguments to create many Usuarios.
     *     @example
     *     // Create many Usuarios
     *     const usuario = await prisma.usuario.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usuarioCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usuarioCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Usuario.
     * @param {usuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
    **/
    delete<T extends usuarioDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, usuarioDeleteArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Usuario.
     * @param {usuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usuarioUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, usuarioUpdateArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Usuarios.
     * @param {usuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usuarioDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usuarioDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usuarioUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, usuarioUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuario.
     * @param {usuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
    **/
    upsert<T extends usuarioUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, usuarioUpsertArgs<ExtArgs>>
    ): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends usuarioCountArgs>(
      args?: Subset<T, usuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usuarioGroupByArgs['orderBy'] }
        : { orderBy?: usuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the usuario model
   */
  readonly fields: usuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    comentario<T extends usuario$comentarioArgs<ExtArgs> = {}>(args?: Subset<T, usuario$comentarioArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$comentarioPayload<ExtArgs>, T, 'findMany'> | Null>;

    lugar<T extends usuario$lugarArgs<ExtArgs> = {}>(args?: Subset<T, usuario$lugarArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$lugarPayload<ExtArgs>, T, 'findMany'> | Null>;

    orden<T extends usuario$ordenArgs<ExtArgs> = {}>(args?: Subset<T, usuario$ordenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ordenPayload<ExtArgs>, T, 'findMany'> | Null>;

    compra<T extends usuario$compraArgs<ExtArgs> = {}>(args?: Subset<T, usuario$compraArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$compraPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the usuario model
   */ 
  interface usuarioFieldRefs {
    readonly id_usuario: FieldRef<"usuario", 'Int'>
    readonly nombre: FieldRef<"usuario", 'String'>
    readonly apellido: FieldRef<"usuario", 'String'>
    readonly email: FieldRef<"usuario", 'String'>
    readonly telefono: FieldRef<"usuario", 'String'>
    readonly edad: FieldRef<"usuario", 'String'>
    readonly foto: FieldRef<"usuario", 'String'>
  }
    

  // Custom InputTypes

  /**
   * usuario findUnique
   */
  export type usuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * Filter, which usuario to fetch.
     */
    where: usuarioWhereUniqueInput
  }


  /**
   * usuario findUniqueOrThrow
   */
  export type usuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * Filter, which usuario to fetch.
     */
    where: usuarioWhereUniqueInput
  }


  /**
   * usuario findFirst
   */
  export type usuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * Filter, which usuario to fetch.
     */
    where?: usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuarioOrderByWithRelationInput | usuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usuarios.
     */
    cursor?: usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }


  /**
   * usuario findFirstOrThrow
   */
  export type usuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * Filter, which usuario to fetch.
     */
    where?: usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuarioOrderByWithRelationInput | usuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usuarios.
     */
    cursor?: usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }


  /**
   * usuario findMany
   */
  export type usuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where?: usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuarioOrderByWithRelationInput | usuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing usuarios.
     */
    cursor?: usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }


  /**
   * usuario create
   */
  export type usuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * The data needed to create a usuario.
     */
    data: XOR<usuarioCreateInput, usuarioUncheckedCreateInput>
  }


  /**
   * usuario createMany
   */
  export type usuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many usuarios.
     */
    data: usuarioCreateManyInput | usuarioCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * usuario update
   */
  export type usuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * The data needed to update a usuario.
     */
    data: XOR<usuarioUpdateInput, usuarioUncheckedUpdateInput>
    /**
     * Choose, which usuario to update.
     */
    where: usuarioWhereUniqueInput
  }


  /**
   * usuario updateMany
   */
  export type usuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update usuarios.
     */
    data: XOR<usuarioUpdateManyMutationInput, usuarioUncheckedUpdateManyInput>
    /**
     * Filter which usuarios to update
     */
    where?: usuarioWhereInput
  }


  /**
   * usuario upsert
   */
  export type usuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * The filter to search for the usuario to update in case it exists.
     */
    where: usuarioWhereUniqueInput
    /**
     * In case the usuario found by the `where` argument doesn't exist, create a new usuario with this data.
     */
    create: XOR<usuarioCreateInput, usuarioUncheckedCreateInput>
    /**
     * In case the usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usuarioUpdateInput, usuarioUncheckedUpdateInput>
  }


  /**
   * usuario delete
   */
  export type usuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuarioInclude<ExtArgs> | null
    /**
     * Filter which usuario to delete.
     */
    where: usuarioWhereUniqueInput
  }


  /**
   * usuario deleteMany
   */
  export type usuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which usuarios to delete
     */
    where?: usuarioWhereInput
  }


  /**
   * usuario.comentario
   */
  export type usuario$comentarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comentario
     */
    select?: comentarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: comentarioInclude<ExtArgs> | null
    where?: comentarioWhereInput
    orderBy?: comentarioOrderByWithRelationInput | comentarioOrderByWithRelationInput[]
    cursor?: comentarioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComentarioScalarFieldEnum | ComentarioScalarFieldEnum[]
  }


  /**
   * usuario.lugar
   */
  export type usuario$lugarArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lugar
     */
    select?: lugarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: lugarInclude<ExtArgs> | null
    where?: lugarWhereInput
    orderBy?: lugarOrderByWithRelationInput | lugarOrderByWithRelationInput[]
    cursor?: lugarWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LugarScalarFieldEnum | LugarScalarFieldEnum[]
  }


  /**
   * usuario.orden
   */
  export type usuario$ordenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orden
     */
    select?: ordenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordenInclude<ExtArgs> | null
    where?: ordenWhereInput
    orderBy?: ordenOrderByWithRelationInput | ordenOrderByWithRelationInput[]
    cursor?: ordenWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrdenScalarFieldEnum | OrdenScalarFieldEnum[]
  }


  /**
   * usuario.compra
   */
  export type usuario$compraArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the compra
     */
    select?: compraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: compraInclude<ExtArgs> | null
    where?: compraWhereInput
    orderBy?: compraOrderByWithRelationInput | compraOrderByWithRelationInput[]
    cursor?: compraWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompraScalarFieldEnum | CompraScalarFieldEnum[]
  }


  /**
   * usuario without action
   */
  export type usuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuario
     */
    select?: usuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usuarioInclude<ExtArgs> | null
  }



  /**
   * Model comentario
   */

  export type AggregateComentario = {
    _count: ComentarioCountAggregateOutputType | null
    _avg: ComentarioAvgAggregateOutputType | null
    _sum: ComentarioSumAggregateOutputType | null
    _min: ComentarioMinAggregateOutputType | null
    _max: ComentarioMaxAggregateOutputType | null
  }

  export type ComentarioAvgAggregateOutputType = {
    id_comentario: number | null
    id_usuario: number | null
  }

  export type ComentarioSumAggregateOutputType = {
    id_comentario: number | null
    id_usuario: number | null
  }

  export type ComentarioMinAggregateOutputType = {
    id_comentario: number | null
    id_usuario: number | null
    comentario: string | null
  }

  export type ComentarioMaxAggregateOutputType = {
    id_comentario: number | null
    id_usuario: number | null
    comentario: string | null
  }

  export type ComentarioCountAggregateOutputType = {
    id_comentario: number
    id_usuario: number
    comentario: number
    _all: number
  }


  export type ComentarioAvgAggregateInputType = {
    id_comentario?: true
    id_usuario?: true
  }

  export type ComentarioSumAggregateInputType = {
    id_comentario?: true
    id_usuario?: true
  }

  export type ComentarioMinAggregateInputType = {
    id_comentario?: true
    id_usuario?: true
    comentario?: true
  }

  export type ComentarioMaxAggregateInputType = {
    id_comentario?: true
    id_usuario?: true
    comentario?: true
  }

  export type ComentarioCountAggregateInputType = {
    id_comentario?: true
    id_usuario?: true
    comentario?: true
    _all?: true
  }

  export type ComentarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which comentario to aggregate.
     */
    where?: comentarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comentarios to fetch.
     */
    orderBy?: comentarioOrderByWithRelationInput | comentarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: comentarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comentarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comentarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned comentarios
    **/
    _count?: true | ComentarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ComentarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ComentarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ComentarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ComentarioMaxAggregateInputType
  }

  export type GetComentarioAggregateType<T extends ComentarioAggregateArgs> = {
        [P in keyof T & keyof AggregateComentario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComentario[P]>
      : GetScalarType<T[P], AggregateComentario[P]>
  }




  export type comentarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: comentarioWhereInput
    orderBy?: comentarioOrderByWithAggregationInput | comentarioOrderByWithAggregationInput[]
    by: ComentarioScalarFieldEnum[] | ComentarioScalarFieldEnum
    having?: comentarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ComentarioCountAggregateInputType | true
    _avg?: ComentarioAvgAggregateInputType
    _sum?: ComentarioSumAggregateInputType
    _min?: ComentarioMinAggregateInputType
    _max?: ComentarioMaxAggregateInputType
  }

  export type ComentarioGroupByOutputType = {
    id_comentario: number
    id_usuario: number
    comentario: string
    _count: ComentarioCountAggregateOutputType | null
    _avg: ComentarioAvgAggregateOutputType | null
    _sum: ComentarioSumAggregateOutputType | null
    _min: ComentarioMinAggregateOutputType | null
    _max: ComentarioMaxAggregateOutputType | null
  }

  type GetComentarioGroupByPayload<T extends comentarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ComentarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ComentarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ComentarioGroupByOutputType[P]>
            : GetScalarType<T[P], ComentarioGroupByOutputType[P]>
        }
      >
    >


  export type comentarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_comentario?: boolean
    id_usuario?: boolean
    comentario?: boolean
    usuario?: boolean | usuarioDefaultArgs<ExtArgs>
    publicacion?: boolean | comentario$publicacionArgs<ExtArgs>
    _count?: boolean | ComentarioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comentario"]>

  export type comentarioSelectScalar = {
    id_comentario?: boolean
    id_usuario?: boolean
    comentario?: boolean
  }

  export type comentarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | usuarioDefaultArgs<ExtArgs>
    publicacion?: boolean | comentario$publicacionArgs<ExtArgs>
    _count?: boolean | ComentarioCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $comentarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "comentario"
    objects: {
      usuario: Prisma.$usuarioPayload<ExtArgs>
      publicacion: Prisma.$publicacionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_comentario: number
      id_usuario: number
      comentario: string
    }, ExtArgs["result"]["comentario"]>
    composites: {}
  }


  type comentarioGetPayload<S extends boolean | null | undefined | comentarioDefaultArgs> = $Result.GetResult<Prisma.$comentarioPayload, S>

  type comentarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<comentarioFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ComentarioCountAggregateInputType | true
    }

  export interface comentarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['comentario'], meta: { name: 'comentario' } }
    /**
     * Find zero or one Comentario that matches the filter.
     * @param {comentarioFindUniqueArgs} args - Arguments to find a Comentario
     * @example
     * // Get one Comentario
     * const comentario = await prisma.comentario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends comentarioFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, comentarioFindUniqueArgs<ExtArgs>>
    ): Prisma__comentarioClient<$Result.GetResult<Prisma.$comentarioPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Comentario that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {comentarioFindUniqueOrThrowArgs} args - Arguments to find a Comentario
     * @example
     * // Get one Comentario
     * const comentario = await prisma.comentario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends comentarioFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, comentarioFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__comentarioClient<$Result.GetResult<Prisma.$comentarioPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Comentario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {comentarioFindFirstArgs} args - Arguments to find a Comentario
     * @example
     * // Get one Comentario
     * const comentario = await prisma.comentario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends comentarioFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, comentarioFindFirstArgs<ExtArgs>>
    ): Prisma__comentarioClient<$Result.GetResult<Prisma.$comentarioPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Comentario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {comentarioFindFirstOrThrowArgs} args - Arguments to find a Comentario
     * @example
     * // Get one Comentario
     * const comentario = await prisma.comentario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends comentarioFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, comentarioFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__comentarioClient<$Result.GetResult<Prisma.$comentarioPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Comentarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {comentarioFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comentarios
     * const comentarios = await prisma.comentario.findMany()
     * 
     * // Get first 10 Comentarios
     * const comentarios = await prisma.comentario.findMany({ take: 10 })
     * 
     * // Only select the `id_comentario`
     * const comentarioWithId_comentarioOnly = await prisma.comentario.findMany({ select: { id_comentario: true } })
     * 
    **/
    findMany<T extends comentarioFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, comentarioFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$comentarioPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Comentario.
     * @param {comentarioCreateArgs} args - Arguments to create a Comentario.
     * @example
     * // Create one Comentario
     * const Comentario = await prisma.comentario.create({
     *   data: {
     *     // ... data to create a Comentario
     *   }
     * })
     * 
    **/
    create<T extends comentarioCreateArgs<ExtArgs>>(
      args: SelectSubset<T, comentarioCreateArgs<ExtArgs>>
    ): Prisma__comentarioClient<$Result.GetResult<Prisma.$comentarioPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Comentarios.
     *     @param {comentarioCreateManyArgs} args - Arguments to create many Comentarios.
     *     @example
     *     // Create many Comentarios
     *     const comentario = await prisma.comentario.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends comentarioCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, comentarioCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Comentario.
     * @param {comentarioDeleteArgs} args - Arguments to delete one Comentario.
     * @example
     * // Delete one Comentario
     * const Comentario = await prisma.comentario.delete({
     *   where: {
     *     // ... filter to delete one Comentario
     *   }
     * })
     * 
    **/
    delete<T extends comentarioDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, comentarioDeleteArgs<ExtArgs>>
    ): Prisma__comentarioClient<$Result.GetResult<Prisma.$comentarioPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Comentario.
     * @param {comentarioUpdateArgs} args - Arguments to update one Comentario.
     * @example
     * // Update one Comentario
     * const comentario = await prisma.comentario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends comentarioUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, comentarioUpdateArgs<ExtArgs>>
    ): Prisma__comentarioClient<$Result.GetResult<Prisma.$comentarioPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Comentarios.
     * @param {comentarioDeleteManyArgs} args - Arguments to filter Comentarios to delete.
     * @example
     * // Delete a few Comentarios
     * const { count } = await prisma.comentario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends comentarioDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, comentarioDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comentarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {comentarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comentarios
     * const comentario = await prisma.comentario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends comentarioUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, comentarioUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Comentario.
     * @param {comentarioUpsertArgs} args - Arguments to update or create a Comentario.
     * @example
     * // Update or create a Comentario
     * const comentario = await prisma.comentario.upsert({
     *   create: {
     *     // ... data to create a Comentario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comentario we want to update
     *   }
     * })
    **/
    upsert<T extends comentarioUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, comentarioUpsertArgs<ExtArgs>>
    ): Prisma__comentarioClient<$Result.GetResult<Prisma.$comentarioPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Comentarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {comentarioCountArgs} args - Arguments to filter Comentarios to count.
     * @example
     * // Count the number of Comentarios
     * const count = await prisma.comentario.count({
     *   where: {
     *     // ... the filter for the Comentarios we want to count
     *   }
     * })
    **/
    count<T extends comentarioCountArgs>(
      args?: Subset<T, comentarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ComentarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comentario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComentarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ComentarioAggregateArgs>(args: Subset<T, ComentarioAggregateArgs>): Prisma.PrismaPromise<GetComentarioAggregateType<T>>

    /**
     * Group by Comentario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {comentarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends comentarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: comentarioGroupByArgs['orderBy'] }
        : { orderBy?: comentarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, comentarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetComentarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the comentario model
   */
  readonly fields: comentarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for comentario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__comentarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    usuario<T extends usuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usuarioDefaultArgs<ExtArgs>>): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    publicacion<T extends comentario$publicacionArgs<ExtArgs> = {}>(args?: Subset<T, comentario$publicacionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$publicacionPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the comentario model
   */ 
  interface comentarioFieldRefs {
    readonly id_comentario: FieldRef<"comentario", 'Int'>
    readonly id_usuario: FieldRef<"comentario", 'Int'>
    readonly comentario: FieldRef<"comentario", 'String'>
  }
    

  // Custom InputTypes

  /**
   * comentario findUnique
   */
  export type comentarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comentario
     */
    select?: comentarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: comentarioInclude<ExtArgs> | null
    /**
     * Filter, which comentario to fetch.
     */
    where: comentarioWhereUniqueInput
  }


  /**
   * comentario findUniqueOrThrow
   */
  export type comentarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comentario
     */
    select?: comentarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: comentarioInclude<ExtArgs> | null
    /**
     * Filter, which comentario to fetch.
     */
    where: comentarioWhereUniqueInput
  }


  /**
   * comentario findFirst
   */
  export type comentarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comentario
     */
    select?: comentarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: comentarioInclude<ExtArgs> | null
    /**
     * Filter, which comentario to fetch.
     */
    where?: comentarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comentarios to fetch.
     */
    orderBy?: comentarioOrderByWithRelationInput | comentarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for comentarios.
     */
    cursor?: comentarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comentarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comentarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of comentarios.
     */
    distinct?: ComentarioScalarFieldEnum | ComentarioScalarFieldEnum[]
  }


  /**
   * comentario findFirstOrThrow
   */
  export type comentarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comentario
     */
    select?: comentarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: comentarioInclude<ExtArgs> | null
    /**
     * Filter, which comentario to fetch.
     */
    where?: comentarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comentarios to fetch.
     */
    orderBy?: comentarioOrderByWithRelationInput | comentarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for comentarios.
     */
    cursor?: comentarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comentarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comentarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of comentarios.
     */
    distinct?: ComentarioScalarFieldEnum | ComentarioScalarFieldEnum[]
  }


  /**
   * comentario findMany
   */
  export type comentarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comentario
     */
    select?: comentarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: comentarioInclude<ExtArgs> | null
    /**
     * Filter, which comentarios to fetch.
     */
    where?: comentarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comentarios to fetch.
     */
    orderBy?: comentarioOrderByWithRelationInput | comentarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing comentarios.
     */
    cursor?: comentarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comentarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comentarios.
     */
    skip?: number
    distinct?: ComentarioScalarFieldEnum | ComentarioScalarFieldEnum[]
  }


  /**
   * comentario create
   */
  export type comentarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comentario
     */
    select?: comentarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: comentarioInclude<ExtArgs> | null
    /**
     * The data needed to create a comentario.
     */
    data: XOR<comentarioCreateInput, comentarioUncheckedCreateInput>
  }


  /**
   * comentario createMany
   */
  export type comentarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many comentarios.
     */
    data: comentarioCreateManyInput | comentarioCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * comentario update
   */
  export type comentarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comentario
     */
    select?: comentarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: comentarioInclude<ExtArgs> | null
    /**
     * The data needed to update a comentario.
     */
    data: XOR<comentarioUpdateInput, comentarioUncheckedUpdateInput>
    /**
     * Choose, which comentario to update.
     */
    where: comentarioWhereUniqueInput
  }


  /**
   * comentario updateMany
   */
  export type comentarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update comentarios.
     */
    data: XOR<comentarioUpdateManyMutationInput, comentarioUncheckedUpdateManyInput>
    /**
     * Filter which comentarios to update
     */
    where?: comentarioWhereInput
  }


  /**
   * comentario upsert
   */
  export type comentarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comentario
     */
    select?: comentarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: comentarioInclude<ExtArgs> | null
    /**
     * The filter to search for the comentario to update in case it exists.
     */
    where: comentarioWhereUniqueInput
    /**
     * In case the comentario found by the `where` argument doesn't exist, create a new comentario with this data.
     */
    create: XOR<comentarioCreateInput, comentarioUncheckedCreateInput>
    /**
     * In case the comentario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<comentarioUpdateInput, comentarioUncheckedUpdateInput>
  }


  /**
   * comentario delete
   */
  export type comentarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comentario
     */
    select?: comentarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: comentarioInclude<ExtArgs> | null
    /**
     * Filter which comentario to delete.
     */
    where: comentarioWhereUniqueInput
  }


  /**
   * comentario deleteMany
   */
  export type comentarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which comentarios to delete
     */
    where?: comentarioWhereInput
  }


  /**
   * comentario.publicacion
   */
  export type comentario$publicacionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the publicacion
     */
    select?: publicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: publicacionInclude<ExtArgs> | null
    where?: publicacionWhereInput
    orderBy?: publicacionOrderByWithRelationInput | publicacionOrderByWithRelationInput[]
    cursor?: publicacionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PublicacionScalarFieldEnum | PublicacionScalarFieldEnum[]
  }


  /**
   * comentario without action
   */
  export type comentarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the comentario
     */
    select?: comentarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: comentarioInclude<ExtArgs> | null
  }



  /**
   * Model lugar
   */

  export type AggregateLugar = {
    _count: LugarCountAggregateOutputType | null
    _avg: LugarAvgAggregateOutputType | null
    _sum: LugarSumAggregateOutputType | null
    _min: LugarMinAggregateOutputType | null
    _max: LugarMaxAggregateOutputType | null
  }

  export type LugarAvgAggregateOutputType = {
    id_lugar: number | null
    id_usuario: number | null
  }

  export type LugarSumAggregateOutputType = {
    id_lugar: number | null
    id_usuario: number | null
  }

  export type LugarMinAggregateOutputType = {
    id_lugar: number | null
    id_usuario: number | null
    pais: string | null
    provincia: string | null
  }

  export type LugarMaxAggregateOutputType = {
    id_lugar: number | null
    id_usuario: number | null
    pais: string | null
    provincia: string | null
  }

  export type LugarCountAggregateOutputType = {
    id_lugar: number
    id_usuario: number
    pais: number
    provincia: number
    _all: number
  }


  export type LugarAvgAggregateInputType = {
    id_lugar?: true
    id_usuario?: true
  }

  export type LugarSumAggregateInputType = {
    id_lugar?: true
    id_usuario?: true
  }

  export type LugarMinAggregateInputType = {
    id_lugar?: true
    id_usuario?: true
    pais?: true
    provincia?: true
  }

  export type LugarMaxAggregateInputType = {
    id_lugar?: true
    id_usuario?: true
    pais?: true
    provincia?: true
  }

  export type LugarCountAggregateInputType = {
    id_lugar?: true
    id_usuario?: true
    pais?: true
    provincia?: true
    _all?: true
  }

  export type LugarAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which lugar to aggregate.
     */
    where?: lugarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lugars to fetch.
     */
    orderBy?: lugarOrderByWithRelationInput | lugarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: lugarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lugars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lugars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned lugars
    **/
    _count?: true | LugarCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LugarAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LugarSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LugarMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LugarMaxAggregateInputType
  }

  export type GetLugarAggregateType<T extends LugarAggregateArgs> = {
        [P in keyof T & keyof AggregateLugar]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLugar[P]>
      : GetScalarType<T[P], AggregateLugar[P]>
  }




  export type lugarGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: lugarWhereInput
    orderBy?: lugarOrderByWithAggregationInput | lugarOrderByWithAggregationInput[]
    by: LugarScalarFieldEnum[] | LugarScalarFieldEnum
    having?: lugarScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LugarCountAggregateInputType | true
    _avg?: LugarAvgAggregateInputType
    _sum?: LugarSumAggregateInputType
    _min?: LugarMinAggregateInputType
    _max?: LugarMaxAggregateInputType
  }

  export type LugarGroupByOutputType = {
    id_lugar: number
    id_usuario: number
    pais: string
    provincia: string
    _count: LugarCountAggregateOutputType | null
    _avg: LugarAvgAggregateOutputType | null
    _sum: LugarSumAggregateOutputType | null
    _min: LugarMinAggregateOutputType | null
    _max: LugarMaxAggregateOutputType | null
  }

  type GetLugarGroupByPayload<T extends lugarGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LugarGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LugarGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LugarGroupByOutputType[P]>
            : GetScalarType<T[P], LugarGroupByOutputType[P]>
        }
      >
    >


  export type lugarSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_lugar?: boolean
    id_usuario?: boolean
    pais?: boolean
    provincia?: boolean
    usuario?: boolean | usuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lugar"]>

  export type lugarSelectScalar = {
    id_lugar?: boolean
    id_usuario?: boolean
    pais?: boolean
    provincia?: boolean
  }

  export type lugarInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | usuarioDefaultArgs<ExtArgs>
  }


  export type $lugarPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "lugar"
    objects: {
      usuario: Prisma.$usuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id_lugar: number
      id_usuario: number
      pais: string
      provincia: string
    }, ExtArgs["result"]["lugar"]>
    composites: {}
  }


  type lugarGetPayload<S extends boolean | null | undefined | lugarDefaultArgs> = $Result.GetResult<Prisma.$lugarPayload, S>

  type lugarCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<lugarFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: LugarCountAggregateInputType | true
    }

  export interface lugarDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['lugar'], meta: { name: 'lugar' } }
    /**
     * Find zero or one Lugar that matches the filter.
     * @param {lugarFindUniqueArgs} args - Arguments to find a Lugar
     * @example
     * // Get one Lugar
     * const lugar = await prisma.lugar.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends lugarFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, lugarFindUniqueArgs<ExtArgs>>
    ): Prisma__lugarClient<$Result.GetResult<Prisma.$lugarPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Lugar that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {lugarFindUniqueOrThrowArgs} args - Arguments to find a Lugar
     * @example
     * // Get one Lugar
     * const lugar = await prisma.lugar.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends lugarFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, lugarFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__lugarClient<$Result.GetResult<Prisma.$lugarPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Lugar that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lugarFindFirstArgs} args - Arguments to find a Lugar
     * @example
     * // Get one Lugar
     * const lugar = await prisma.lugar.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends lugarFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, lugarFindFirstArgs<ExtArgs>>
    ): Prisma__lugarClient<$Result.GetResult<Prisma.$lugarPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Lugar that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lugarFindFirstOrThrowArgs} args - Arguments to find a Lugar
     * @example
     * // Get one Lugar
     * const lugar = await prisma.lugar.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends lugarFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, lugarFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__lugarClient<$Result.GetResult<Prisma.$lugarPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Lugars that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lugarFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Lugars
     * const lugars = await prisma.lugar.findMany()
     * 
     * // Get first 10 Lugars
     * const lugars = await prisma.lugar.findMany({ take: 10 })
     * 
     * // Only select the `id_lugar`
     * const lugarWithId_lugarOnly = await prisma.lugar.findMany({ select: { id_lugar: true } })
     * 
    **/
    findMany<T extends lugarFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, lugarFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$lugarPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Lugar.
     * @param {lugarCreateArgs} args - Arguments to create a Lugar.
     * @example
     * // Create one Lugar
     * const Lugar = await prisma.lugar.create({
     *   data: {
     *     // ... data to create a Lugar
     *   }
     * })
     * 
    **/
    create<T extends lugarCreateArgs<ExtArgs>>(
      args: SelectSubset<T, lugarCreateArgs<ExtArgs>>
    ): Prisma__lugarClient<$Result.GetResult<Prisma.$lugarPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Lugars.
     *     @param {lugarCreateManyArgs} args - Arguments to create many Lugars.
     *     @example
     *     // Create many Lugars
     *     const lugar = await prisma.lugar.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends lugarCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, lugarCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Lugar.
     * @param {lugarDeleteArgs} args - Arguments to delete one Lugar.
     * @example
     * // Delete one Lugar
     * const Lugar = await prisma.lugar.delete({
     *   where: {
     *     // ... filter to delete one Lugar
     *   }
     * })
     * 
    **/
    delete<T extends lugarDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, lugarDeleteArgs<ExtArgs>>
    ): Prisma__lugarClient<$Result.GetResult<Prisma.$lugarPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Lugar.
     * @param {lugarUpdateArgs} args - Arguments to update one Lugar.
     * @example
     * // Update one Lugar
     * const lugar = await prisma.lugar.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends lugarUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, lugarUpdateArgs<ExtArgs>>
    ): Prisma__lugarClient<$Result.GetResult<Prisma.$lugarPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Lugars.
     * @param {lugarDeleteManyArgs} args - Arguments to filter Lugars to delete.
     * @example
     * // Delete a few Lugars
     * const { count } = await prisma.lugar.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends lugarDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, lugarDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lugars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lugarUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Lugars
     * const lugar = await prisma.lugar.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends lugarUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, lugarUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Lugar.
     * @param {lugarUpsertArgs} args - Arguments to update or create a Lugar.
     * @example
     * // Update or create a Lugar
     * const lugar = await prisma.lugar.upsert({
     *   create: {
     *     // ... data to create a Lugar
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Lugar we want to update
     *   }
     * })
    **/
    upsert<T extends lugarUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, lugarUpsertArgs<ExtArgs>>
    ): Prisma__lugarClient<$Result.GetResult<Prisma.$lugarPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Lugars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lugarCountArgs} args - Arguments to filter Lugars to count.
     * @example
     * // Count the number of Lugars
     * const count = await prisma.lugar.count({
     *   where: {
     *     // ... the filter for the Lugars we want to count
     *   }
     * })
    **/
    count<T extends lugarCountArgs>(
      args?: Subset<T, lugarCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LugarCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Lugar.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LugarAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LugarAggregateArgs>(args: Subset<T, LugarAggregateArgs>): Prisma.PrismaPromise<GetLugarAggregateType<T>>

    /**
     * Group by Lugar.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lugarGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends lugarGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: lugarGroupByArgs['orderBy'] }
        : { orderBy?: lugarGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, lugarGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLugarGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the lugar model
   */
  readonly fields: lugarFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for lugar.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__lugarClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    usuario<T extends usuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usuarioDefaultArgs<ExtArgs>>): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the lugar model
   */ 
  interface lugarFieldRefs {
    readonly id_lugar: FieldRef<"lugar", 'Int'>
    readonly id_usuario: FieldRef<"lugar", 'Int'>
    readonly pais: FieldRef<"lugar", 'String'>
    readonly provincia: FieldRef<"lugar", 'String'>
  }
    

  // Custom InputTypes

  /**
   * lugar findUnique
   */
  export type lugarFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lugar
     */
    select?: lugarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: lugarInclude<ExtArgs> | null
    /**
     * Filter, which lugar to fetch.
     */
    where: lugarWhereUniqueInput
  }


  /**
   * lugar findUniqueOrThrow
   */
  export type lugarFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lugar
     */
    select?: lugarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: lugarInclude<ExtArgs> | null
    /**
     * Filter, which lugar to fetch.
     */
    where: lugarWhereUniqueInput
  }


  /**
   * lugar findFirst
   */
  export type lugarFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lugar
     */
    select?: lugarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: lugarInclude<ExtArgs> | null
    /**
     * Filter, which lugar to fetch.
     */
    where?: lugarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lugars to fetch.
     */
    orderBy?: lugarOrderByWithRelationInput | lugarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for lugars.
     */
    cursor?: lugarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lugars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lugars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of lugars.
     */
    distinct?: LugarScalarFieldEnum | LugarScalarFieldEnum[]
  }


  /**
   * lugar findFirstOrThrow
   */
  export type lugarFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lugar
     */
    select?: lugarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: lugarInclude<ExtArgs> | null
    /**
     * Filter, which lugar to fetch.
     */
    where?: lugarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lugars to fetch.
     */
    orderBy?: lugarOrderByWithRelationInput | lugarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for lugars.
     */
    cursor?: lugarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lugars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lugars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of lugars.
     */
    distinct?: LugarScalarFieldEnum | LugarScalarFieldEnum[]
  }


  /**
   * lugar findMany
   */
  export type lugarFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lugar
     */
    select?: lugarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: lugarInclude<ExtArgs> | null
    /**
     * Filter, which lugars to fetch.
     */
    where?: lugarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lugars to fetch.
     */
    orderBy?: lugarOrderByWithRelationInput | lugarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing lugars.
     */
    cursor?: lugarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lugars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lugars.
     */
    skip?: number
    distinct?: LugarScalarFieldEnum | LugarScalarFieldEnum[]
  }


  /**
   * lugar create
   */
  export type lugarCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lugar
     */
    select?: lugarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: lugarInclude<ExtArgs> | null
    /**
     * The data needed to create a lugar.
     */
    data: XOR<lugarCreateInput, lugarUncheckedCreateInput>
  }


  /**
   * lugar createMany
   */
  export type lugarCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many lugars.
     */
    data: lugarCreateManyInput | lugarCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * lugar update
   */
  export type lugarUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lugar
     */
    select?: lugarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: lugarInclude<ExtArgs> | null
    /**
     * The data needed to update a lugar.
     */
    data: XOR<lugarUpdateInput, lugarUncheckedUpdateInput>
    /**
     * Choose, which lugar to update.
     */
    where: lugarWhereUniqueInput
  }


  /**
   * lugar updateMany
   */
  export type lugarUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update lugars.
     */
    data: XOR<lugarUpdateManyMutationInput, lugarUncheckedUpdateManyInput>
    /**
     * Filter which lugars to update
     */
    where?: lugarWhereInput
  }


  /**
   * lugar upsert
   */
  export type lugarUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lugar
     */
    select?: lugarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: lugarInclude<ExtArgs> | null
    /**
     * The filter to search for the lugar to update in case it exists.
     */
    where: lugarWhereUniqueInput
    /**
     * In case the lugar found by the `where` argument doesn't exist, create a new lugar with this data.
     */
    create: XOR<lugarCreateInput, lugarUncheckedCreateInput>
    /**
     * In case the lugar was found with the provided `where` argument, update it with this data.
     */
    update: XOR<lugarUpdateInput, lugarUncheckedUpdateInput>
  }


  /**
   * lugar delete
   */
  export type lugarDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lugar
     */
    select?: lugarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: lugarInclude<ExtArgs> | null
    /**
     * Filter which lugar to delete.
     */
    where: lugarWhereUniqueInput
  }


  /**
   * lugar deleteMany
   */
  export type lugarDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which lugars to delete
     */
    where?: lugarWhereInput
  }


  /**
   * lugar without action
   */
  export type lugarDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lugar
     */
    select?: lugarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: lugarInclude<ExtArgs> | null
  }



  /**
   * Model categoria
   */

  export type AggregateCategoria = {
    _count: CategoriaCountAggregateOutputType | null
    _avg: CategoriaAvgAggregateOutputType | null
    _sum: CategoriaSumAggregateOutputType | null
    _min: CategoriaMinAggregateOutputType | null
    _max: CategoriaMaxAggregateOutputType | null
  }

  export type CategoriaAvgAggregateOutputType = {
    id_categoria: number | null
  }

  export type CategoriaSumAggregateOutputType = {
    id_categoria: number | null
  }

  export type CategoriaMinAggregateOutputType = {
    id_categoria: number | null
    categoria: string | null
  }

  export type CategoriaMaxAggregateOutputType = {
    id_categoria: number | null
    categoria: string | null
  }

  export type CategoriaCountAggregateOutputType = {
    id_categoria: number
    categoria: number
    _all: number
  }


  export type CategoriaAvgAggregateInputType = {
    id_categoria?: true
  }

  export type CategoriaSumAggregateInputType = {
    id_categoria?: true
  }

  export type CategoriaMinAggregateInputType = {
    id_categoria?: true
    categoria?: true
  }

  export type CategoriaMaxAggregateInputType = {
    id_categoria?: true
    categoria?: true
  }

  export type CategoriaCountAggregateInputType = {
    id_categoria?: true
    categoria?: true
    _all?: true
  }

  export type CategoriaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which categoria to aggregate.
     */
    where?: categoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categorias to fetch.
     */
    orderBy?: categoriaOrderByWithRelationInput | categoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: categoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned categorias
    **/
    _count?: true | CategoriaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoriaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoriaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriaMaxAggregateInputType
  }

  export type GetCategoriaAggregateType<T extends CategoriaAggregateArgs> = {
        [P in keyof T & keyof AggregateCategoria]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategoria[P]>
      : GetScalarType<T[P], AggregateCategoria[P]>
  }




  export type categoriaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: categoriaWhereInput
    orderBy?: categoriaOrderByWithAggregationInput | categoriaOrderByWithAggregationInput[]
    by: CategoriaScalarFieldEnum[] | CategoriaScalarFieldEnum
    having?: categoriaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriaCountAggregateInputType | true
    _avg?: CategoriaAvgAggregateInputType
    _sum?: CategoriaSumAggregateInputType
    _min?: CategoriaMinAggregateInputType
    _max?: CategoriaMaxAggregateInputType
  }

  export type CategoriaGroupByOutputType = {
    id_categoria: number
    categoria: string
    _count: CategoriaCountAggregateOutputType | null
    _avg: CategoriaAvgAggregateOutputType | null
    _sum: CategoriaSumAggregateOutputType | null
    _min: CategoriaMinAggregateOutputType | null
    _max: CategoriaMaxAggregateOutputType | null
  }

  type GetCategoriaGroupByPayload<T extends categoriaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoriaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriaGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriaGroupByOutputType[P]>
        }
      >
    >


  export type categoriaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_categoria?: boolean
    categoria?: boolean
    producto?: boolean | categoria$productoArgs<ExtArgs>
    _count?: boolean | CategoriaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categoria"]>

  export type categoriaSelectScalar = {
    id_categoria?: boolean
    categoria?: boolean
  }

  export type categoriaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    producto?: boolean | categoria$productoArgs<ExtArgs>
    _count?: boolean | CategoriaCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $categoriaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "categoria"
    objects: {
      producto: Prisma.$productoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_categoria: number
      categoria: string
    }, ExtArgs["result"]["categoria"]>
    composites: {}
  }


  type categoriaGetPayload<S extends boolean | null | undefined | categoriaDefaultArgs> = $Result.GetResult<Prisma.$categoriaPayload, S>

  type categoriaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<categoriaFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: CategoriaCountAggregateInputType | true
    }

  export interface categoriaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['categoria'], meta: { name: 'categoria' } }
    /**
     * Find zero or one Categoria that matches the filter.
     * @param {categoriaFindUniqueArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends categoriaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, categoriaFindUniqueArgs<ExtArgs>>
    ): Prisma__categoriaClient<$Result.GetResult<Prisma.$categoriaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Categoria that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {categoriaFindUniqueOrThrowArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends categoriaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__categoriaClient<$Result.GetResult<Prisma.$categoriaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Categoria that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriaFindFirstArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends categoriaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriaFindFirstArgs<ExtArgs>>
    ): Prisma__categoriaClient<$Result.GetResult<Prisma.$categoriaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Categoria that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriaFindFirstOrThrowArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends categoriaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__categoriaClient<$Result.GetResult<Prisma.$categoriaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Categorias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categorias
     * const categorias = await prisma.categoria.findMany()
     * 
     * // Get first 10 Categorias
     * const categorias = await prisma.categoria.findMany({ take: 10 })
     * 
     * // Only select the `id_categoria`
     * const categoriaWithId_categoriaOnly = await prisma.categoria.findMany({ select: { id_categoria: true } })
     * 
    **/
    findMany<T extends categoriaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$categoriaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Categoria.
     * @param {categoriaCreateArgs} args - Arguments to create a Categoria.
     * @example
     * // Create one Categoria
     * const Categoria = await prisma.categoria.create({
     *   data: {
     *     // ... data to create a Categoria
     *   }
     * })
     * 
    **/
    create<T extends categoriaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, categoriaCreateArgs<ExtArgs>>
    ): Prisma__categoriaClient<$Result.GetResult<Prisma.$categoriaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Categorias.
     *     @param {categoriaCreateManyArgs} args - Arguments to create many Categorias.
     *     @example
     *     // Create many Categorias
     *     const categoria = await prisma.categoria.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends categoriaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Categoria.
     * @param {categoriaDeleteArgs} args - Arguments to delete one Categoria.
     * @example
     * // Delete one Categoria
     * const Categoria = await prisma.categoria.delete({
     *   where: {
     *     // ... filter to delete one Categoria
     *   }
     * })
     * 
    **/
    delete<T extends categoriaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, categoriaDeleteArgs<ExtArgs>>
    ): Prisma__categoriaClient<$Result.GetResult<Prisma.$categoriaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Categoria.
     * @param {categoriaUpdateArgs} args - Arguments to update one Categoria.
     * @example
     * // Update one Categoria
     * const categoria = await prisma.categoria.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends categoriaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, categoriaUpdateArgs<ExtArgs>>
    ): Prisma__categoriaClient<$Result.GetResult<Prisma.$categoriaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Categorias.
     * @param {categoriaDeleteManyArgs} args - Arguments to filter Categorias to delete.
     * @example
     * // Delete a few Categorias
     * const { count } = await prisma.categoria.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends categoriaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categorias
     * const categoria = await prisma.categoria.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends categoriaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, categoriaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Categoria.
     * @param {categoriaUpsertArgs} args - Arguments to update or create a Categoria.
     * @example
     * // Update or create a Categoria
     * const categoria = await prisma.categoria.upsert({
     *   create: {
     *     // ... data to create a Categoria
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categoria we want to update
     *   }
     * })
    **/
    upsert<T extends categoriaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, categoriaUpsertArgs<ExtArgs>>
    ): Prisma__categoriaClient<$Result.GetResult<Prisma.$categoriaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriaCountArgs} args - Arguments to filter Categorias to count.
     * @example
     * // Count the number of Categorias
     * const count = await prisma.categoria.count({
     *   where: {
     *     // ... the filter for the Categorias we want to count
     *   }
     * })
    **/
    count<T extends categoriaCountArgs>(
      args?: Subset<T, categoriaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriaAggregateArgs>(args: Subset<T, CategoriaAggregateArgs>): Prisma.PrismaPromise<GetCategoriaAggregateType<T>>

    /**
     * Group by Categoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends categoriaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: categoriaGroupByArgs['orderBy'] }
        : { orderBy?: categoriaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, categoriaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the categoria model
   */
  readonly fields: categoriaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for categoria.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__categoriaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    producto<T extends categoria$productoArgs<ExtArgs> = {}>(args?: Subset<T, categoria$productoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productoPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the categoria model
   */ 
  interface categoriaFieldRefs {
    readonly id_categoria: FieldRef<"categoria", 'Int'>
    readonly categoria: FieldRef<"categoria", 'String'>
  }
    

  // Custom InputTypes

  /**
   * categoria findUnique
   */
  export type categoriaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoria
     */
    select?: categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriaInclude<ExtArgs> | null
    /**
     * Filter, which categoria to fetch.
     */
    where: categoriaWhereUniqueInput
  }


  /**
   * categoria findUniqueOrThrow
   */
  export type categoriaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoria
     */
    select?: categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriaInclude<ExtArgs> | null
    /**
     * Filter, which categoria to fetch.
     */
    where: categoriaWhereUniqueInput
  }


  /**
   * categoria findFirst
   */
  export type categoriaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoria
     */
    select?: categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriaInclude<ExtArgs> | null
    /**
     * Filter, which categoria to fetch.
     */
    where?: categoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categorias to fetch.
     */
    orderBy?: categoriaOrderByWithRelationInput | categoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categorias.
     */
    cursor?: categoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categorias.
     */
    distinct?: CategoriaScalarFieldEnum | CategoriaScalarFieldEnum[]
  }


  /**
   * categoria findFirstOrThrow
   */
  export type categoriaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoria
     */
    select?: categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriaInclude<ExtArgs> | null
    /**
     * Filter, which categoria to fetch.
     */
    where?: categoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categorias to fetch.
     */
    orderBy?: categoriaOrderByWithRelationInput | categoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categorias.
     */
    cursor?: categoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categorias.
     */
    distinct?: CategoriaScalarFieldEnum | CategoriaScalarFieldEnum[]
  }


  /**
   * categoria findMany
   */
  export type categoriaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoria
     */
    select?: categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriaInclude<ExtArgs> | null
    /**
     * Filter, which categorias to fetch.
     */
    where?: categoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categorias to fetch.
     */
    orderBy?: categoriaOrderByWithRelationInput | categoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing categorias.
     */
    cursor?: categoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categorias.
     */
    skip?: number
    distinct?: CategoriaScalarFieldEnum | CategoriaScalarFieldEnum[]
  }


  /**
   * categoria create
   */
  export type categoriaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoria
     */
    select?: categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriaInclude<ExtArgs> | null
    /**
     * The data needed to create a categoria.
     */
    data: XOR<categoriaCreateInput, categoriaUncheckedCreateInput>
  }


  /**
   * categoria createMany
   */
  export type categoriaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many categorias.
     */
    data: categoriaCreateManyInput | categoriaCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * categoria update
   */
  export type categoriaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoria
     */
    select?: categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriaInclude<ExtArgs> | null
    /**
     * The data needed to update a categoria.
     */
    data: XOR<categoriaUpdateInput, categoriaUncheckedUpdateInput>
    /**
     * Choose, which categoria to update.
     */
    where: categoriaWhereUniqueInput
  }


  /**
   * categoria updateMany
   */
  export type categoriaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update categorias.
     */
    data: XOR<categoriaUpdateManyMutationInput, categoriaUncheckedUpdateManyInput>
    /**
     * Filter which categorias to update
     */
    where?: categoriaWhereInput
  }


  /**
   * categoria upsert
   */
  export type categoriaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoria
     */
    select?: categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriaInclude<ExtArgs> | null
    /**
     * The filter to search for the categoria to update in case it exists.
     */
    where: categoriaWhereUniqueInput
    /**
     * In case the categoria found by the `where` argument doesn't exist, create a new categoria with this data.
     */
    create: XOR<categoriaCreateInput, categoriaUncheckedCreateInput>
    /**
     * In case the categoria was found with the provided `where` argument, update it with this data.
     */
    update: XOR<categoriaUpdateInput, categoriaUncheckedUpdateInput>
  }


  /**
   * categoria delete
   */
  export type categoriaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoria
     */
    select?: categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriaInclude<ExtArgs> | null
    /**
     * Filter which categoria to delete.
     */
    where: categoriaWhereUniqueInput
  }


  /**
   * categoria deleteMany
   */
  export type categoriaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which categorias to delete
     */
    where?: categoriaWhereInput
  }


  /**
   * categoria.producto
   */
  export type categoria$productoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the producto
     */
    select?: productoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productoInclude<ExtArgs> | null
    where?: productoWhereInput
    orderBy?: productoOrderByWithRelationInput | productoOrderByWithRelationInput[]
    cursor?: productoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductoScalarFieldEnum | ProductoScalarFieldEnum[]
  }


  /**
   * categoria without action
   */
  export type categoriaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categoria
     */
    select?: categoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriaInclude<ExtArgs> | null
  }



  /**
   * Model producto
   */

  export type AggregateProducto = {
    _count: ProductoCountAggregateOutputType | null
    _avg: ProductoAvgAggregateOutputType | null
    _sum: ProductoSumAggregateOutputType | null
    _min: ProductoMinAggregateOutputType | null
    _max: ProductoMaxAggregateOutputType | null
  }

  export type ProductoAvgAggregateOutputType = {
    id_producto: number | null
    id_categoria: number | null
    precio: number | null
    stock: number | null
  }

  export type ProductoSumAggregateOutputType = {
    id_producto: number | null
    id_categoria: number | null
    precio: number | null
    stock: number | null
  }

  export type ProductoMinAggregateOutputType = {
    id_producto: number | null
    id_categoria: number | null
    marca: string | null
    descripcion: string | null
    precio: number | null
    stock: number | null
    foto: string | null
  }

  export type ProductoMaxAggregateOutputType = {
    id_producto: number | null
    id_categoria: number | null
    marca: string | null
    descripcion: string | null
    precio: number | null
    stock: number | null
    foto: string | null
  }

  export type ProductoCountAggregateOutputType = {
    id_producto: number
    id_categoria: number
    marca: number
    descripcion: number
    precio: number
    stock: number
    foto: number
    _all: number
  }


  export type ProductoAvgAggregateInputType = {
    id_producto?: true
    id_categoria?: true
    precio?: true
    stock?: true
  }

  export type ProductoSumAggregateInputType = {
    id_producto?: true
    id_categoria?: true
    precio?: true
    stock?: true
  }

  export type ProductoMinAggregateInputType = {
    id_producto?: true
    id_categoria?: true
    marca?: true
    descripcion?: true
    precio?: true
    stock?: true
    foto?: true
  }

  export type ProductoMaxAggregateInputType = {
    id_producto?: true
    id_categoria?: true
    marca?: true
    descripcion?: true
    precio?: true
    stock?: true
    foto?: true
  }

  export type ProductoCountAggregateInputType = {
    id_producto?: true
    id_categoria?: true
    marca?: true
    descripcion?: true
    precio?: true
    stock?: true
    foto?: true
    _all?: true
  }

  export type ProductoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which producto to aggregate.
     */
    where?: productoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productos to fetch.
     */
    orderBy?: productoOrderByWithRelationInput | productoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: productoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned productos
    **/
    _count?: true | ProductoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductoMaxAggregateInputType
  }

  export type GetProductoAggregateType<T extends ProductoAggregateArgs> = {
        [P in keyof T & keyof AggregateProducto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProducto[P]>
      : GetScalarType<T[P], AggregateProducto[P]>
  }




  export type productoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productoWhereInput
    orderBy?: productoOrderByWithAggregationInput | productoOrderByWithAggregationInput[]
    by: ProductoScalarFieldEnum[] | ProductoScalarFieldEnum
    having?: productoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductoCountAggregateInputType | true
    _avg?: ProductoAvgAggregateInputType
    _sum?: ProductoSumAggregateInputType
    _min?: ProductoMinAggregateInputType
    _max?: ProductoMaxAggregateInputType
  }

  export type ProductoGroupByOutputType = {
    id_producto: number
    id_categoria: number
    marca: string
    descripcion: string
    precio: number
    stock: number
    foto: string
    _count: ProductoCountAggregateOutputType | null
    _avg: ProductoAvgAggregateOutputType | null
    _sum: ProductoSumAggregateOutputType | null
    _min: ProductoMinAggregateOutputType | null
    _max: ProductoMaxAggregateOutputType | null
  }

  type GetProductoGroupByPayload<T extends productoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductoGroupByOutputType[P]>
            : GetScalarType<T[P], ProductoGroupByOutputType[P]>
        }
      >
    >


  export type productoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_producto?: boolean
    id_categoria?: boolean
    marca?: boolean
    descripcion?: boolean
    precio?: boolean
    stock?: boolean
    foto?: boolean
    categoria?: boolean | categoriaDefaultArgs<ExtArgs>
    orden?: boolean | producto$ordenArgs<ExtArgs>
    _count?: boolean | ProductoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["producto"]>

  export type productoSelectScalar = {
    id_producto?: boolean
    id_categoria?: boolean
    marca?: boolean
    descripcion?: boolean
    precio?: boolean
    stock?: boolean
    foto?: boolean
  }

  export type productoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categoria?: boolean | categoriaDefaultArgs<ExtArgs>
    orden?: boolean | producto$ordenArgs<ExtArgs>
    _count?: boolean | ProductoCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $productoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "producto"
    objects: {
      categoria: Prisma.$categoriaPayload<ExtArgs>
      orden: Prisma.$ordenPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_producto: number
      id_categoria: number
      marca: string
      descripcion: string
      precio: number
      stock: number
      foto: string
    }, ExtArgs["result"]["producto"]>
    composites: {}
  }


  type productoGetPayload<S extends boolean | null | undefined | productoDefaultArgs> = $Result.GetResult<Prisma.$productoPayload, S>

  type productoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<productoFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ProductoCountAggregateInputType | true
    }

  export interface productoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['producto'], meta: { name: 'producto' } }
    /**
     * Find zero or one Producto that matches the filter.
     * @param {productoFindUniqueArgs} args - Arguments to find a Producto
     * @example
     * // Get one Producto
     * const producto = await prisma.producto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends productoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, productoFindUniqueArgs<ExtArgs>>
    ): Prisma__productoClient<$Result.GetResult<Prisma.$productoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Producto that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {productoFindUniqueOrThrowArgs} args - Arguments to find a Producto
     * @example
     * // Get one Producto
     * const producto = await prisma.producto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends productoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, productoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__productoClient<$Result.GetResult<Prisma.$productoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Producto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productoFindFirstArgs} args - Arguments to find a Producto
     * @example
     * // Get one Producto
     * const producto = await prisma.producto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends productoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, productoFindFirstArgs<ExtArgs>>
    ): Prisma__productoClient<$Result.GetResult<Prisma.$productoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Producto that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productoFindFirstOrThrowArgs} args - Arguments to find a Producto
     * @example
     * // Get one Producto
     * const producto = await prisma.producto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends productoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, productoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__productoClient<$Result.GetResult<Prisma.$productoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Productos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Productos
     * const productos = await prisma.producto.findMany()
     * 
     * // Get first 10 Productos
     * const productos = await prisma.producto.findMany({ take: 10 })
     * 
     * // Only select the `id_producto`
     * const productoWithId_productoOnly = await prisma.producto.findMany({ select: { id_producto: true } })
     * 
    **/
    findMany<T extends productoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Producto.
     * @param {productoCreateArgs} args - Arguments to create a Producto.
     * @example
     * // Create one Producto
     * const Producto = await prisma.producto.create({
     *   data: {
     *     // ... data to create a Producto
     *   }
     * })
     * 
    **/
    create<T extends productoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, productoCreateArgs<ExtArgs>>
    ): Prisma__productoClient<$Result.GetResult<Prisma.$productoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Productos.
     *     @param {productoCreateManyArgs} args - Arguments to create many Productos.
     *     @example
     *     // Create many Productos
     *     const producto = await prisma.producto.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends productoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Producto.
     * @param {productoDeleteArgs} args - Arguments to delete one Producto.
     * @example
     * // Delete one Producto
     * const Producto = await prisma.producto.delete({
     *   where: {
     *     // ... filter to delete one Producto
     *   }
     * })
     * 
    **/
    delete<T extends productoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, productoDeleteArgs<ExtArgs>>
    ): Prisma__productoClient<$Result.GetResult<Prisma.$productoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Producto.
     * @param {productoUpdateArgs} args - Arguments to update one Producto.
     * @example
     * // Update one Producto
     * const producto = await prisma.producto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends productoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, productoUpdateArgs<ExtArgs>>
    ): Prisma__productoClient<$Result.GetResult<Prisma.$productoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Productos.
     * @param {productoDeleteManyArgs} args - Arguments to filter Productos to delete.
     * @example
     * // Delete a few Productos
     * const { count } = await prisma.producto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends productoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Productos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Productos
     * const producto = await prisma.producto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends productoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, productoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Producto.
     * @param {productoUpsertArgs} args - Arguments to update or create a Producto.
     * @example
     * // Update or create a Producto
     * const producto = await prisma.producto.upsert({
     *   create: {
     *     // ... data to create a Producto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Producto we want to update
     *   }
     * })
    **/
    upsert<T extends productoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, productoUpsertArgs<ExtArgs>>
    ): Prisma__productoClient<$Result.GetResult<Prisma.$productoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Productos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productoCountArgs} args - Arguments to filter Productos to count.
     * @example
     * // Count the number of Productos
     * const count = await prisma.producto.count({
     *   where: {
     *     // ... the filter for the Productos we want to count
     *   }
     * })
    **/
    count<T extends productoCountArgs>(
      args?: Subset<T, productoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Producto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductoAggregateArgs>(args: Subset<T, ProductoAggregateArgs>): Prisma.PrismaPromise<GetProductoAggregateType<T>>

    /**
     * Group by Producto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends productoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: productoGroupByArgs['orderBy'] }
        : { orderBy?: productoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, productoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the producto model
   */
  readonly fields: productoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for producto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__productoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    categoria<T extends categoriaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, categoriaDefaultArgs<ExtArgs>>): Prisma__categoriaClient<$Result.GetResult<Prisma.$categoriaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    orden<T extends producto$ordenArgs<ExtArgs> = {}>(args?: Subset<T, producto$ordenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ordenPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the producto model
   */ 
  interface productoFieldRefs {
    readonly id_producto: FieldRef<"producto", 'Int'>
    readonly id_categoria: FieldRef<"producto", 'Int'>
    readonly marca: FieldRef<"producto", 'String'>
    readonly descripcion: FieldRef<"producto", 'String'>
    readonly precio: FieldRef<"producto", 'Float'>
    readonly stock: FieldRef<"producto", 'Int'>
    readonly foto: FieldRef<"producto", 'String'>
  }
    

  // Custom InputTypes

  /**
   * producto findUnique
   */
  export type productoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the producto
     */
    select?: productoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productoInclude<ExtArgs> | null
    /**
     * Filter, which producto to fetch.
     */
    where: productoWhereUniqueInput
  }


  /**
   * producto findUniqueOrThrow
   */
  export type productoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the producto
     */
    select?: productoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productoInclude<ExtArgs> | null
    /**
     * Filter, which producto to fetch.
     */
    where: productoWhereUniqueInput
  }


  /**
   * producto findFirst
   */
  export type productoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the producto
     */
    select?: productoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productoInclude<ExtArgs> | null
    /**
     * Filter, which producto to fetch.
     */
    where?: productoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productos to fetch.
     */
    orderBy?: productoOrderByWithRelationInput | productoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for productos.
     */
    cursor?: productoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of productos.
     */
    distinct?: ProductoScalarFieldEnum | ProductoScalarFieldEnum[]
  }


  /**
   * producto findFirstOrThrow
   */
  export type productoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the producto
     */
    select?: productoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productoInclude<ExtArgs> | null
    /**
     * Filter, which producto to fetch.
     */
    where?: productoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productos to fetch.
     */
    orderBy?: productoOrderByWithRelationInput | productoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for productos.
     */
    cursor?: productoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of productos.
     */
    distinct?: ProductoScalarFieldEnum | ProductoScalarFieldEnum[]
  }


  /**
   * producto findMany
   */
  export type productoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the producto
     */
    select?: productoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productoInclude<ExtArgs> | null
    /**
     * Filter, which productos to fetch.
     */
    where?: productoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productos to fetch.
     */
    orderBy?: productoOrderByWithRelationInput | productoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing productos.
     */
    cursor?: productoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productos.
     */
    skip?: number
    distinct?: ProductoScalarFieldEnum | ProductoScalarFieldEnum[]
  }


  /**
   * producto create
   */
  export type productoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the producto
     */
    select?: productoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productoInclude<ExtArgs> | null
    /**
     * The data needed to create a producto.
     */
    data: XOR<productoCreateInput, productoUncheckedCreateInput>
  }


  /**
   * producto createMany
   */
  export type productoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many productos.
     */
    data: productoCreateManyInput | productoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * producto update
   */
  export type productoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the producto
     */
    select?: productoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productoInclude<ExtArgs> | null
    /**
     * The data needed to update a producto.
     */
    data: XOR<productoUpdateInput, productoUncheckedUpdateInput>
    /**
     * Choose, which producto to update.
     */
    where: productoWhereUniqueInput
  }


  /**
   * producto updateMany
   */
  export type productoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update productos.
     */
    data: XOR<productoUpdateManyMutationInput, productoUncheckedUpdateManyInput>
    /**
     * Filter which productos to update
     */
    where?: productoWhereInput
  }


  /**
   * producto upsert
   */
  export type productoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the producto
     */
    select?: productoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productoInclude<ExtArgs> | null
    /**
     * The filter to search for the producto to update in case it exists.
     */
    where: productoWhereUniqueInput
    /**
     * In case the producto found by the `where` argument doesn't exist, create a new producto with this data.
     */
    create: XOR<productoCreateInput, productoUncheckedCreateInput>
    /**
     * In case the producto was found with the provided `where` argument, update it with this data.
     */
    update: XOR<productoUpdateInput, productoUncheckedUpdateInput>
  }


  /**
   * producto delete
   */
  export type productoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the producto
     */
    select?: productoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productoInclude<ExtArgs> | null
    /**
     * Filter which producto to delete.
     */
    where: productoWhereUniqueInput
  }


  /**
   * producto deleteMany
   */
  export type productoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which productos to delete
     */
    where?: productoWhereInput
  }


  /**
   * producto.orden
   */
  export type producto$ordenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orden
     */
    select?: ordenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordenInclude<ExtArgs> | null
    where?: ordenWhereInput
    orderBy?: ordenOrderByWithRelationInput | ordenOrderByWithRelationInput[]
    cursor?: ordenWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrdenScalarFieldEnum | OrdenScalarFieldEnum[]
  }


  /**
   * producto without action
   */
  export type productoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the producto
     */
    select?: productoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productoInclude<ExtArgs> | null
  }



  /**
   * Model publicacion
   */

  export type AggregatePublicacion = {
    _count: PublicacionCountAggregateOutputType | null
    _avg: PublicacionAvgAggregateOutputType | null
    _sum: PublicacionSumAggregateOutputType | null
    _min: PublicacionMinAggregateOutputType | null
    _max: PublicacionMaxAggregateOutputType | null
  }

  export type PublicacionAvgAggregateOutputType = {
    id_publicacion: number | null
    id_comentario: number | null
  }

  export type PublicacionSumAggregateOutputType = {
    id_publicacion: number | null
    id_comentario: number | null
  }

  export type PublicacionMinAggregateOutputType = {
    id_publicacion: number | null
    id_comentario: number | null
    titulo: string | null
    descripcion: string | null
    foto: string | null
  }

  export type PublicacionMaxAggregateOutputType = {
    id_publicacion: number | null
    id_comentario: number | null
    titulo: string | null
    descripcion: string | null
    foto: string | null
  }

  export type PublicacionCountAggregateOutputType = {
    id_publicacion: number
    id_comentario: number
    titulo: number
    descripcion: number
    foto: number
    _all: number
  }


  export type PublicacionAvgAggregateInputType = {
    id_publicacion?: true
    id_comentario?: true
  }

  export type PublicacionSumAggregateInputType = {
    id_publicacion?: true
    id_comentario?: true
  }

  export type PublicacionMinAggregateInputType = {
    id_publicacion?: true
    id_comentario?: true
    titulo?: true
    descripcion?: true
    foto?: true
  }

  export type PublicacionMaxAggregateInputType = {
    id_publicacion?: true
    id_comentario?: true
    titulo?: true
    descripcion?: true
    foto?: true
  }

  export type PublicacionCountAggregateInputType = {
    id_publicacion?: true
    id_comentario?: true
    titulo?: true
    descripcion?: true
    foto?: true
    _all?: true
  }

  export type PublicacionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which publicacion to aggregate.
     */
    where?: publicacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of publicacions to fetch.
     */
    orderBy?: publicacionOrderByWithRelationInput | publicacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: publicacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` publicacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` publicacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned publicacions
    **/
    _count?: true | PublicacionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PublicacionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PublicacionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PublicacionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PublicacionMaxAggregateInputType
  }

  export type GetPublicacionAggregateType<T extends PublicacionAggregateArgs> = {
        [P in keyof T & keyof AggregatePublicacion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePublicacion[P]>
      : GetScalarType<T[P], AggregatePublicacion[P]>
  }




  export type publicacionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: publicacionWhereInput
    orderBy?: publicacionOrderByWithAggregationInput | publicacionOrderByWithAggregationInput[]
    by: PublicacionScalarFieldEnum[] | PublicacionScalarFieldEnum
    having?: publicacionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PublicacionCountAggregateInputType | true
    _avg?: PublicacionAvgAggregateInputType
    _sum?: PublicacionSumAggregateInputType
    _min?: PublicacionMinAggregateInputType
    _max?: PublicacionMaxAggregateInputType
  }

  export type PublicacionGroupByOutputType = {
    id_publicacion: number
    id_comentario: number
    titulo: string
    descripcion: string | null
    foto: string | null
    _count: PublicacionCountAggregateOutputType | null
    _avg: PublicacionAvgAggregateOutputType | null
    _sum: PublicacionSumAggregateOutputType | null
    _min: PublicacionMinAggregateOutputType | null
    _max: PublicacionMaxAggregateOutputType | null
  }

  type GetPublicacionGroupByPayload<T extends publicacionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PublicacionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PublicacionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PublicacionGroupByOutputType[P]>
            : GetScalarType<T[P], PublicacionGroupByOutputType[P]>
        }
      >
    >


  export type publicacionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_publicacion?: boolean
    id_comentario?: boolean
    titulo?: boolean
    descripcion?: boolean
    foto?: boolean
    comentario?: boolean | comentarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["publicacion"]>

  export type publicacionSelectScalar = {
    id_publicacion?: boolean
    id_comentario?: boolean
    titulo?: boolean
    descripcion?: boolean
    foto?: boolean
  }

  export type publicacionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comentario?: boolean | comentarioDefaultArgs<ExtArgs>
  }


  export type $publicacionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "publicacion"
    objects: {
      comentario: Prisma.$comentarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id_publicacion: number
      id_comentario: number
      titulo: string
      descripcion: string | null
      foto: string | null
    }, ExtArgs["result"]["publicacion"]>
    composites: {}
  }


  type publicacionGetPayload<S extends boolean | null | undefined | publicacionDefaultArgs> = $Result.GetResult<Prisma.$publicacionPayload, S>

  type publicacionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<publicacionFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: PublicacionCountAggregateInputType | true
    }

  export interface publicacionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['publicacion'], meta: { name: 'publicacion' } }
    /**
     * Find zero or one Publicacion that matches the filter.
     * @param {publicacionFindUniqueArgs} args - Arguments to find a Publicacion
     * @example
     * // Get one Publicacion
     * const publicacion = await prisma.publicacion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends publicacionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, publicacionFindUniqueArgs<ExtArgs>>
    ): Prisma__publicacionClient<$Result.GetResult<Prisma.$publicacionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Publicacion that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {publicacionFindUniqueOrThrowArgs} args - Arguments to find a Publicacion
     * @example
     * // Get one Publicacion
     * const publicacion = await prisma.publicacion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends publicacionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, publicacionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__publicacionClient<$Result.GetResult<Prisma.$publicacionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Publicacion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {publicacionFindFirstArgs} args - Arguments to find a Publicacion
     * @example
     * // Get one Publicacion
     * const publicacion = await prisma.publicacion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends publicacionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, publicacionFindFirstArgs<ExtArgs>>
    ): Prisma__publicacionClient<$Result.GetResult<Prisma.$publicacionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Publicacion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {publicacionFindFirstOrThrowArgs} args - Arguments to find a Publicacion
     * @example
     * // Get one Publicacion
     * const publicacion = await prisma.publicacion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends publicacionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, publicacionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__publicacionClient<$Result.GetResult<Prisma.$publicacionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Publicacions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {publicacionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Publicacions
     * const publicacions = await prisma.publicacion.findMany()
     * 
     * // Get first 10 Publicacions
     * const publicacions = await prisma.publicacion.findMany({ take: 10 })
     * 
     * // Only select the `id_publicacion`
     * const publicacionWithId_publicacionOnly = await prisma.publicacion.findMany({ select: { id_publicacion: true } })
     * 
    **/
    findMany<T extends publicacionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, publicacionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$publicacionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Publicacion.
     * @param {publicacionCreateArgs} args - Arguments to create a Publicacion.
     * @example
     * // Create one Publicacion
     * const Publicacion = await prisma.publicacion.create({
     *   data: {
     *     // ... data to create a Publicacion
     *   }
     * })
     * 
    **/
    create<T extends publicacionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, publicacionCreateArgs<ExtArgs>>
    ): Prisma__publicacionClient<$Result.GetResult<Prisma.$publicacionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Publicacions.
     *     @param {publicacionCreateManyArgs} args - Arguments to create many Publicacions.
     *     @example
     *     // Create many Publicacions
     *     const publicacion = await prisma.publicacion.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends publicacionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, publicacionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Publicacion.
     * @param {publicacionDeleteArgs} args - Arguments to delete one Publicacion.
     * @example
     * // Delete one Publicacion
     * const Publicacion = await prisma.publicacion.delete({
     *   where: {
     *     // ... filter to delete one Publicacion
     *   }
     * })
     * 
    **/
    delete<T extends publicacionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, publicacionDeleteArgs<ExtArgs>>
    ): Prisma__publicacionClient<$Result.GetResult<Prisma.$publicacionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Publicacion.
     * @param {publicacionUpdateArgs} args - Arguments to update one Publicacion.
     * @example
     * // Update one Publicacion
     * const publicacion = await prisma.publicacion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends publicacionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, publicacionUpdateArgs<ExtArgs>>
    ): Prisma__publicacionClient<$Result.GetResult<Prisma.$publicacionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Publicacions.
     * @param {publicacionDeleteManyArgs} args - Arguments to filter Publicacions to delete.
     * @example
     * // Delete a few Publicacions
     * const { count } = await prisma.publicacion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends publicacionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, publicacionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Publicacions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {publicacionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Publicacions
     * const publicacion = await prisma.publicacion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends publicacionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, publicacionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Publicacion.
     * @param {publicacionUpsertArgs} args - Arguments to update or create a Publicacion.
     * @example
     * // Update or create a Publicacion
     * const publicacion = await prisma.publicacion.upsert({
     *   create: {
     *     // ... data to create a Publicacion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Publicacion we want to update
     *   }
     * })
    **/
    upsert<T extends publicacionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, publicacionUpsertArgs<ExtArgs>>
    ): Prisma__publicacionClient<$Result.GetResult<Prisma.$publicacionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Publicacions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {publicacionCountArgs} args - Arguments to filter Publicacions to count.
     * @example
     * // Count the number of Publicacions
     * const count = await prisma.publicacion.count({
     *   where: {
     *     // ... the filter for the Publicacions we want to count
     *   }
     * })
    **/
    count<T extends publicacionCountArgs>(
      args?: Subset<T, publicacionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PublicacionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Publicacion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicacionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PublicacionAggregateArgs>(args: Subset<T, PublicacionAggregateArgs>): Prisma.PrismaPromise<GetPublicacionAggregateType<T>>

    /**
     * Group by Publicacion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {publicacionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends publicacionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: publicacionGroupByArgs['orderBy'] }
        : { orderBy?: publicacionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, publicacionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPublicacionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the publicacion model
   */
  readonly fields: publicacionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for publicacion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__publicacionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    comentario<T extends comentarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, comentarioDefaultArgs<ExtArgs>>): Prisma__comentarioClient<$Result.GetResult<Prisma.$comentarioPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the publicacion model
   */ 
  interface publicacionFieldRefs {
    readonly id_publicacion: FieldRef<"publicacion", 'Int'>
    readonly id_comentario: FieldRef<"publicacion", 'Int'>
    readonly titulo: FieldRef<"publicacion", 'String'>
    readonly descripcion: FieldRef<"publicacion", 'String'>
    readonly foto: FieldRef<"publicacion", 'String'>
  }
    

  // Custom InputTypes

  /**
   * publicacion findUnique
   */
  export type publicacionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the publicacion
     */
    select?: publicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: publicacionInclude<ExtArgs> | null
    /**
     * Filter, which publicacion to fetch.
     */
    where: publicacionWhereUniqueInput
  }


  /**
   * publicacion findUniqueOrThrow
   */
  export type publicacionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the publicacion
     */
    select?: publicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: publicacionInclude<ExtArgs> | null
    /**
     * Filter, which publicacion to fetch.
     */
    where: publicacionWhereUniqueInput
  }


  /**
   * publicacion findFirst
   */
  export type publicacionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the publicacion
     */
    select?: publicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: publicacionInclude<ExtArgs> | null
    /**
     * Filter, which publicacion to fetch.
     */
    where?: publicacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of publicacions to fetch.
     */
    orderBy?: publicacionOrderByWithRelationInput | publicacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for publicacions.
     */
    cursor?: publicacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` publicacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` publicacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of publicacions.
     */
    distinct?: PublicacionScalarFieldEnum | PublicacionScalarFieldEnum[]
  }


  /**
   * publicacion findFirstOrThrow
   */
  export type publicacionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the publicacion
     */
    select?: publicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: publicacionInclude<ExtArgs> | null
    /**
     * Filter, which publicacion to fetch.
     */
    where?: publicacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of publicacions to fetch.
     */
    orderBy?: publicacionOrderByWithRelationInput | publicacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for publicacions.
     */
    cursor?: publicacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` publicacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` publicacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of publicacions.
     */
    distinct?: PublicacionScalarFieldEnum | PublicacionScalarFieldEnum[]
  }


  /**
   * publicacion findMany
   */
  export type publicacionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the publicacion
     */
    select?: publicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: publicacionInclude<ExtArgs> | null
    /**
     * Filter, which publicacions to fetch.
     */
    where?: publicacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of publicacions to fetch.
     */
    orderBy?: publicacionOrderByWithRelationInput | publicacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing publicacions.
     */
    cursor?: publicacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` publicacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` publicacions.
     */
    skip?: number
    distinct?: PublicacionScalarFieldEnum | PublicacionScalarFieldEnum[]
  }


  /**
   * publicacion create
   */
  export type publicacionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the publicacion
     */
    select?: publicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: publicacionInclude<ExtArgs> | null
    /**
     * The data needed to create a publicacion.
     */
    data: XOR<publicacionCreateInput, publicacionUncheckedCreateInput>
  }


  /**
   * publicacion createMany
   */
  export type publicacionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many publicacions.
     */
    data: publicacionCreateManyInput | publicacionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * publicacion update
   */
  export type publicacionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the publicacion
     */
    select?: publicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: publicacionInclude<ExtArgs> | null
    /**
     * The data needed to update a publicacion.
     */
    data: XOR<publicacionUpdateInput, publicacionUncheckedUpdateInput>
    /**
     * Choose, which publicacion to update.
     */
    where: publicacionWhereUniqueInput
  }


  /**
   * publicacion updateMany
   */
  export type publicacionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update publicacions.
     */
    data: XOR<publicacionUpdateManyMutationInput, publicacionUncheckedUpdateManyInput>
    /**
     * Filter which publicacions to update
     */
    where?: publicacionWhereInput
  }


  /**
   * publicacion upsert
   */
  export type publicacionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the publicacion
     */
    select?: publicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: publicacionInclude<ExtArgs> | null
    /**
     * The filter to search for the publicacion to update in case it exists.
     */
    where: publicacionWhereUniqueInput
    /**
     * In case the publicacion found by the `where` argument doesn't exist, create a new publicacion with this data.
     */
    create: XOR<publicacionCreateInput, publicacionUncheckedCreateInput>
    /**
     * In case the publicacion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<publicacionUpdateInput, publicacionUncheckedUpdateInput>
  }


  /**
   * publicacion delete
   */
  export type publicacionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the publicacion
     */
    select?: publicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: publicacionInclude<ExtArgs> | null
    /**
     * Filter which publicacion to delete.
     */
    where: publicacionWhereUniqueInput
  }


  /**
   * publicacion deleteMany
   */
  export type publicacionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which publicacions to delete
     */
    where?: publicacionWhereInput
  }


  /**
   * publicacion without action
   */
  export type publicacionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the publicacion
     */
    select?: publicacionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: publicacionInclude<ExtArgs> | null
  }



  /**
   * Model orden
   */

  export type AggregateOrden = {
    _count: OrdenCountAggregateOutputType | null
    _avg: OrdenAvgAggregateOutputType | null
    _sum: OrdenSumAggregateOutputType | null
    _min: OrdenMinAggregateOutputType | null
    _max: OrdenMaxAggregateOutputType | null
  }

  export type OrdenAvgAggregateOutputType = {
    id_item: number | null
    numero_orden: number | null
    id_usuario: number | null
    id_producto: number | null
    stock: number | null
    precio: number | null
  }

  export type OrdenSumAggregateOutputType = {
    id_item: number | null
    numero_orden: number | null
    id_usuario: number | null
    id_producto: number | null
    stock: number | null
    precio: number | null
  }

  export type OrdenMinAggregateOutputType = {
    id_item: number | null
    numero_orden: number | null
    id_usuario: number | null
    id_producto: number | null
    stock: number | null
    precio: number | null
  }

  export type OrdenMaxAggregateOutputType = {
    id_item: number | null
    numero_orden: number | null
    id_usuario: number | null
    id_producto: number | null
    stock: number | null
    precio: number | null
  }

  export type OrdenCountAggregateOutputType = {
    id_item: number
    numero_orden: number
    id_usuario: number
    id_producto: number
    stock: number
    precio: number
    _all: number
  }


  export type OrdenAvgAggregateInputType = {
    id_item?: true
    numero_orden?: true
    id_usuario?: true
    id_producto?: true
    stock?: true
    precio?: true
  }

  export type OrdenSumAggregateInputType = {
    id_item?: true
    numero_orden?: true
    id_usuario?: true
    id_producto?: true
    stock?: true
    precio?: true
  }

  export type OrdenMinAggregateInputType = {
    id_item?: true
    numero_orden?: true
    id_usuario?: true
    id_producto?: true
    stock?: true
    precio?: true
  }

  export type OrdenMaxAggregateInputType = {
    id_item?: true
    numero_orden?: true
    id_usuario?: true
    id_producto?: true
    stock?: true
    precio?: true
  }

  export type OrdenCountAggregateInputType = {
    id_item?: true
    numero_orden?: true
    id_usuario?: true
    id_producto?: true
    stock?: true
    precio?: true
    _all?: true
  }

  export type OrdenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which orden to aggregate.
     */
    where?: ordenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ordens to fetch.
     */
    orderBy?: ordenOrderByWithRelationInput | ordenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ordenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ordens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ordens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ordens
    **/
    _count?: true | OrdenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrdenAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrdenSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrdenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrdenMaxAggregateInputType
  }

  export type GetOrdenAggregateType<T extends OrdenAggregateArgs> = {
        [P in keyof T & keyof AggregateOrden]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrden[P]>
      : GetScalarType<T[P], AggregateOrden[P]>
  }




  export type ordenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ordenWhereInput
    orderBy?: ordenOrderByWithAggregationInput | ordenOrderByWithAggregationInput[]
    by: OrdenScalarFieldEnum[] | OrdenScalarFieldEnum
    having?: ordenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrdenCountAggregateInputType | true
    _avg?: OrdenAvgAggregateInputType
    _sum?: OrdenSumAggregateInputType
    _min?: OrdenMinAggregateInputType
    _max?: OrdenMaxAggregateInputType
  }

  export type OrdenGroupByOutputType = {
    id_item: number
    numero_orden: number
    id_usuario: number
    id_producto: number
    stock: number
    precio: number
    _count: OrdenCountAggregateOutputType | null
    _avg: OrdenAvgAggregateOutputType | null
    _sum: OrdenSumAggregateOutputType | null
    _min: OrdenMinAggregateOutputType | null
    _max: OrdenMaxAggregateOutputType | null
  }

  type GetOrdenGroupByPayload<T extends ordenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrdenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrdenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrdenGroupByOutputType[P]>
            : GetScalarType<T[P], OrdenGroupByOutputType[P]>
        }
      >
    >


  export type ordenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_item?: boolean
    numero_orden?: boolean
    id_usuario?: boolean
    id_producto?: boolean
    stock?: boolean
    precio?: boolean
    usuario?: boolean | usuarioDefaultArgs<ExtArgs>
    producto?: boolean | productoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orden"]>

  export type ordenSelectScalar = {
    id_item?: boolean
    numero_orden?: boolean
    id_usuario?: boolean
    id_producto?: boolean
    stock?: boolean
    precio?: boolean
  }

  export type ordenInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | usuarioDefaultArgs<ExtArgs>
    producto?: boolean | productoDefaultArgs<ExtArgs>
  }


  export type $ordenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "orden"
    objects: {
      usuario: Prisma.$usuarioPayload<ExtArgs>
      producto: Prisma.$productoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id_item: number
      numero_orden: number
      id_usuario: number
      id_producto: number
      stock: number
      precio: number
    }, ExtArgs["result"]["orden"]>
    composites: {}
  }


  type ordenGetPayload<S extends boolean | null | undefined | ordenDefaultArgs> = $Result.GetResult<Prisma.$ordenPayload, S>

  type ordenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ordenFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: OrdenCountAggregateInputType | true
    }

  export interface ordenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['orden'], meta: { name: 'orden' } }
    /**
     * Find zero or one Orden that matches the filter.
     * @param {ordenFindUniqueArgs} args - Arguments to find a Orden
     * @example
     * // Get one Orden
     * const orden = await prisma.orden.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ordenFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ordenFindUniqueArgs<ExtArgs>>
    ): Prisma__ordenClient<$Result.GetResult<Prisma.$ordenPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Orden that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ordenFindUniqueOrThrowArgs} args - Arguments to find a Orden
     * @example
     * // Get one Orden
     * const orden = await prisma.orden.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ordenFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ordenFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ordenClient<$Result.GetResult<Prisma.$ordenPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Orden that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordenFindFirstArgs} args - Arguments to find a Orden
     * @example
     * // Get one Orden
     * const orden = await prisma.orden.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ordenFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ordenFindFirstArgs<ExtArgs>>
    ): Prisma__ordenClient<$Result.GetResult<Prisma.$ordenPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Orden that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordenFindFirstOrThrowArgs} args - Arguments to find a Orden
     * @example
     * // Get one Orden
     * const orden = await prisma.orden.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ordenFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ordenFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ordenClient<$Result.GetResult<Prisma.$ordenPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Ordens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordenFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ordens
     * const ordens = await prisma.orden.findMany()
     * 
     * // Get first 10 Ordens
     * const ordens = await prisma.orden.findMany({ take: 10 })
     * 
     * // Only select the `id_item`
     * const ordenWithId_itemOnly = await prisma.orden.findMany({ select: { id_item: true } })
     * 
    **/
    findMany<T extends ordenFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ordenFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ordenPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Orden.
     * @param {ordenCreateArgs} args - Arguments to create a Orden.
     * @example
     * // Create one Orden
     * const Orden = await prisma.orden.create({
     *   data: {
     *     // ... data to create a Orden
     *   }
     * })
     * 
    **/
    create<T extends ordenCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ordenCreateArgs<ExtArgs>>
    ): Prisma__ordenClient<$Result.GetResult<Prisma.$ordenPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Ordens.
     *     @param {ordenCreateManyArgs} args - Arguments to create many Ordens.
     *     @example
     *     // Create many Ordens
     *     const orden = await prisma.orden.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ordenCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ordenCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Orden.
     * @param {ordenDeleteArgs} args - Arguments to delete one Orden.
     * @example
     * // Delete one Orden
     * const Orden = await prisma.orden.delete({
     *   where: {
     *     // ... filter to delete one Orden
     *   }
     * })
     * 
    **/
    delete<T extends ordenDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ordenDeleteArgs<ExtArgs>>
    ): Prisma__ordenClient<$Result.GetResult<Prisma.$ordenPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Orden.
     * @param {ordenUpdateArgs} args - Arguments to update one Orden.
     * @example
     * // Update one Orden
     * const orden = await prisma.orden.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ordenUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ordenUpdateArgs<ExtArgs>>
    ): Prisma__ordenClient<$Result.GetResult<Prisma.$ordenPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Ordens.
     * @param {ordenDeleteManyArgs} args - Arguments to filter Ordens to delete.
     * @example
     * // Delete a few Ordens
     * const { count } = await prisma.orden.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ordenDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ordenDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ordens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ordens
     * const orden = await prisma.orden.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ordenUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ordenUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Orden.
     * @param {ordenUpsertArgs} args - Arguments to update or create a Orden.
     * @example
     * // Update or create a Orden
     * const orden = await prisma.orden.upsert({
     *   create: {
     *     // ... data to create a Orden
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Orden we want to update
     *   }
     * })
    **/
    upsert<T extends ordenUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ordenUpsertArgs<ExtArgs>>
    ): Prisma__ordenClient<$Result.GetResult<Prisma.$ordenPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Ordens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordenCountArgs} args - Arguments to filter Ordens to count.
     * @example
     * // Count the number of Ordens
     * const count = await prisma.orden.count({
     *   where: {
     *     // ... the filter for the Ordens we want to count
     *   }
     * })
    **/
    count<T extends ordenCountArgs>(
      args?: Subset<T, ordenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrdenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Orden.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrdenAggregateArgs>(args: Subset<T, OrdenAggregateArgs>): Prisma.PrismaPromise<GetOrdenAggregateType<T>>

    /**
     * Group by Orden.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ordenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ordenGroupByArgs['orderBy'] }
        : { orderBy?: ordenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ordenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrdenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the orden model
   */
  readonly fields: ordenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for orden.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ordenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    usuario<T extends usuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usuarioDefaultArgs<ExtArgs>>): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    producto<T extends productoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, productoDefaultArgs<ExtArgs>>): Prisma__productoClient<$Result.GetResult<Prisma.$productoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the orden model
   */ 
  interface ordenFieldRefs {
    readonly id_item: FieldRef<"orden", 'Int'>
    readonly numero_orden: FieldRef<"orden", 'Int'>
    readonly id_usuario: FieldRef<"orden", 'Int'>
    readonly id_producto: FieldRef<"orden", 'Int'>
    readonly stock: FieldRef<"orden", 'Int'>
    readonly precio: FieldRef<"orden", 'Float'>
  }
    

  // Custom InputTypes

  /**
   * orden findUnique
   */
  export type ordenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orden
     */
    select?: ordenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordenInclude<ExtArgs> | null
    /**
     * Filter, which orden to fetch.
     */
    where: ordenWhereUniqueInput
  }


  /**
   * orden findUniqueOrThrow
   */
  export type ordenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orden
     */
    select?: ordenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordenInclude<ExtArgs> | null
    /**
     * Filter, which orden to fetch.
     */
    where: ordenWhereUniqueInput
  }


  /**
   * orden findFirst
   */
  export type ordenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orden
     */
    select?: ordenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordenInclude<ExtArgs> | null
    /**
     * Filter, which orden to fetch.
     */
    where?: ordenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ordens to fetch.
     */
    orderBy?: ordenOrderByWithRelationInput | ordenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ordens.
     */
    cursor?: ordenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ordens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ordens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ordens.
     */
    distinct?: OrdenScalarFieldEnum | OrdenScalarFieldEnum[]
  }


  /**
   * orden findFirstOrThrow
   */
  export type ordenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orden
     */
    select?: ordenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordenInclude<ExtArgs> | null
    /**
     * Filter, which orden to fetch.
     */
    where?: ordenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ordens to fetch.
     */
    orderBy?: ordenOrderByWithRelationInput | ordenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ordens.
     */
    cursor?: ordenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ordens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ordens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ordens.
     */
    distinct?: OrdenScalarFieldEnum | OrdenScalarFieldEnum[]
  }


  /**
   * orden findMany
   */
  export type ordenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orden
     */
    select?: ordenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordenInclude<ExtArgs> | null
    /**
     * Filter, which ordens to fetch.
     */
    where?: ordenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ordens to fetch.
     */
    orderBy?: ordenOrderByWithRelationInput | ordenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ordens.
     */
    cursor?: ordenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ordens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ordens.
     */
    skip?: number
    distinct?: OrdenScalarFieldEnum | OrdenScalarFieldEnum[]
  }


  /**
   * orden create
   */
  export type ordenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orden
     */
    select?: ordenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordenInclude<ExtArgs> | null
    /**
     * The data needed to create a orden.
     */
    data: XOR<ordenCreateInput, ordenUncheckedCreateInput>
  }


  /**
   * orden createMany
   */
  export type ordenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ordens.
     */
    data: ordenCreateManyInput | ordenCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * orden update
   */
  export type ordenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orden
     */
    select?: ordenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordenInclude<ExtArgs> | null
    /**
     * The data needed to update a orden.
     */
    data: XOR<ordenUpdateInput, ordenUncheckedUpdateInput>
    /**
     * Choose, which orden to update.
     */
    where: ordenWhereUniqueInput
  }


  /**
   * orden updateMany
   */
  export type ordenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ordens.
     */
    data: XOR<ordenUpdateManyMutationInput, ordenUncheckedUpdateManyInput>
    /**
     * Filter which ordens to update
     */
    where?: ordenWhereInput
  }


  /**
   * orden upsert
   */
  export type ordenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orden
     */
    select?: ordenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordenInclude<ExtArgs> | null
    /**
     * The filter to search for the orden to update in case it exists.
     */
    where: ordenWhereUniqueInput
    /**
     * In case the orden found by the `where` argument doesn't exist, create a new orden with this data.
     */
    create: XOR<ordenCreateInput, ordenUncheckedCreateInput>
    /**
     * In case the orden was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ordenUpdateInput, ordenUncheckedUpdateInput>
  }


  /**
   * orden delete
   */
  export type ordenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orden
     */
    select?: ordenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordenInclude<ExtArgs> | null
    /**
     * Filter which orden to delete.
     */
    where: ordenWhereUniqueInput
  }


  /**
   * orden deleteMany
   */
  export type ordenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ordens to delete
     */
    where?: ordenWhereInput
  }


  /**
   * orden without action
   */
  export type ordenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orden
     */
    select?: ordenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordenInclude<ExtArgs> | null
  }



  /**
   * Model compra
   */

  export type AggregateCompra = {
    _count: CompraCountAggregateOutputType | null
    _avg: CompraAvgAggregateOutputType | null
    _sum: CompraSumAggregateOutputType | null
    _min: CompraMinAggregateOutputType | null
    _max: CompraMaxAggregateOutputType | null
  }

  export type CompraAvgAggregateOutputType = {
    id_compra: number | null
    id_usuario: number | null
    numero_orden: number | null
    precio_Final: number | null
  }

  export type CompraSumAggregateOutputType = {
    id_compra: number | null
    id_usuario: number | null
    numero_orden: number | null
    precio_Final: number | null
  }

  export type CompraMinAggregateOutputType = {
    id_compra: number | null
    id_usuario: number | null
    numero_orden: number | null
    precio_Final: number | null
    fehca: string | null
  }

  export type CompraMaxAggregateOutputType = {
    id_compra: number | null
    id_usuario: number | null
    numero_orden: number | null
    precio_Final: number | null
    fehca: string | null
  }

  export type CompraCountAggregateOutputType = {
    id_compra: number
    id_usuario: number
    numero_orden: number
    precio_Final: number
    fehca: number
    _all: number
  }


  export type CompraAvgAggregateInputType = {
    id_compra?: true
    id_usuario?: true
    numero_orden?: true
    precio_Final?: true
  }

  export type CompraSumAggregateInputType = {
    id_compra?: true
    id_usuario?: true
    numero_orden?: true
    precio_Final?: true
  }

  export type CompraMinAggregateInputType = {
    id_compra?: true
    id_usuario?: true
    numero_orden?: true
    precio_Final?: true
    fehca?: true
  }

  export type CompraMaxAggregateInputType = {
    id_compra?: true
    id_usuario?: true
    numero_orden?: true
    precio_Final?: true
    fehca?: true
  }

  export type CompraCountAggregateInputType = {
    id_compra?: true
    id_usuario?: true
    numero_orden?: true
    precio_Final?: true
    fehca?: true
    _all?: true
  }

  export type CompraAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which compra to aggregate.
     */
    where?: compraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of compras to fetch.
     */
    orderBy?: compraOrderByWithRelationInput | compraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: compraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` compras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` compras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned compras
    **/
    _count?: true | CompraCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompraAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompraSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompraMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompraMaxAggregateInputType
  }

  export type GetCompraAggregateType<T extends CompraAggregateArgs> = {
        [P in keyof T & keyof AggregateCompra]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompra[P]>
      : GetScalarType<T[P], AggregateCompra[P]>
  }




  export type compraGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: compraWhereInput
    orderBy?: compraOrderByWithAggregationInput | compraOrderByWithAggregationInput[]
    by: CompraScalarFieldEnum[] | CompraScalarFieldEnum
    having?: compraScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompraCountAggregateInputType | true
    _avg?: CompraAvgAggregateInputType
    _sum?: CompraSumAggregateInputType
    _min?: CompraMinAggregateInputType
    _max?: CompraMaxAggregateInputType
  }

  export type CompraGroupByOutputType = {
    id_compra: number
    id_usuario: number
    numero_orden: number
    precio_Final: number
    fehca: string
    _count: CompraCountAggregateOutputType | null
    _avg: CompraAvgAggregateOutputType | null
    _sum: CompraSumAggregateOutputType | null
    _min: CompraMinAggregateOutputType | null
    _max: CompraMaxAggregateOutputType | null
  }

  type GetCompraGroupByPayload<T extends compraGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompraGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompraGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompraGroupByOutputType[P]>
            : GetScalarType<T[P], CompraGroupByOutputType[P]>
        }
      >
    >


  export type compraSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_compra?: boolean
    id_usuario?: boolean
    numero_orden?: boolean
    precio_Final?: boolean
    fehca?: boolean
    usuario?: boolean | usuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["compra"]>

  export type compraSelectScalar = {
    id_compra?: boolean
    id_usuario?: boolean
    numero_orden?: boolean
    precio_Final?: boolean
    fehca?: boolean
  }

  export type compraInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | usuarioDefaultArgs<ExtArgs>
  }


  export type $compraPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "compra"
    objects: {
      usuario: Prisma.$usuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id_compra: number
      id_usuario: number
      numero_orden: number
      precio_Final: number
      fehca: string
    }, ExtArgs["result"]["compra"]>
    composites: {}
  }


  type compraGetPayload<S extends boolean | null | undefined | compraDefaultArgs> = $Result.GetResult<Prisma.$compraPayload, S>

  type compraCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<compraFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: CompraCountAggregateInputType | true
    }

  export interface compraDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['compra'], meta: { name: 'compra' } }
    /**
     * Find zero or one Compra that matches the filter.
     * @param {compraFindUniqueArgs} args - Arguments to find a Compra
     * @example
     * // Get one Compra
     * const compra = await prisma.compra.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends compraFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, compraFindUniqueArgs<ExtArgs>>
    ): Prisma__compraClient<$Result.GetResult<Prisma.$compraPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Compra that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {compraFindUniqueOrThrowArgs} args - Arguments to find a Compra
     * @example
     * // Get one Compra
     * const compra = await prisma.compra.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends compraFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, compraFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__compraClient<$Result.GetResult<Prisma.$compraPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Compra that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {compraFindFirstArgs} args - Arguments to find a Compra
     * @example
     * // Get one Compra
     * const compra = await prisma.compra.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends compraFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, compraFindFirstArgs<ExtArgs>>
    ): Prisma__compraClient<$Result.GetResult<Prisma.$compraPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Compra that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {compraFindFirstOrThrowArgs} args - Arguments to find a Compra
     * @example
     * // Get one Compra
     * const compra = await prisma.compra.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends compraFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, compraFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__compraClient<$Result.GetResult<Prisma.$compraPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Compras that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {compraFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Compras
     * const compras = await prisma.compra.findMany()
     * 
     * // Get first 10 Compras
     * const compras = await prisma.compra.findMany({ take: 10 })
     * 
     * // Only select the `id_compra`
     * const compraWithId_compraOnly = await prisma.compra.findMany({ select: { id_compra: true } })
     * 
    **/
    findMany<T extends compraFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, compraFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$compraPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Compra.
     * @param {compraCreateArgs} args - Arguments to create a Compra.
     * @example
     * // Create one Compra
     * const Compra = await prisma.compra.create({
     *   data: {
     *     // ... data to create a Compra
     *   }
     * })
     * 
    **/
    create<T extends compraCreateArgs<ExtArgs>>(
      args: SelectSubset<T, compraCreateArgs<ExtArgs>>
    ): Prisma__compraClient<$Result.GetResult<Prisma.$compraPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Compras.
     *     @param {compraCreateManyArgs} args - Arguments to create many Compras.
     *     @example
     *     // Create many Compras
     *     const compra = await prisma.compra.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends compraCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, compraCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Compra.
     * @param {compraDeleteArgs} args - Arguments to delete one Compra.
     * @example
     * // Delete one Compra
     * const Compra = await prisma.compra.delete({
     *   where: {
     *     // ... filter to delete one Compra
     *   }
     * })
     * 
    **/
    delete<T extends compraDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, compraDeleteArgs<ExtArgs>>
    ): Prisma__compraClient<$Result.GetResult<Prisma.$compraPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Compra.
     * @param {compraUpdateArgs} args - Arguments to update one Compra.
     * @example
     * // Update one Compra
     * const compra = await prisma.compra.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends compraUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, compraUpdateArgs<ExtArgs>>
    ): Prisma__compraClient<$Result.GetResult<Prisma.$compraPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Compras.
     * @param {compraDeleteManyArgs} args - Arguments to filter Compras to delete.
     * @example
     * // Delete a few Compras
     * const { count } = await prisma.compra.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends compraDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, compraDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Compras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {compraUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Compras
     * const compra = await prisma.compra.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends compraUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, compraUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Compra.
     * @param {compraUpsertArgs} args - Arguments to update or create a Compra.
     * @example
     * // Update or create a Compra
     * const compra = await prisma.compra.upsert({
     *   create: {
     *     // ... data to create a Compra
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Compra we want to update
     *   }
     * })
    **/
    upsert<T extends compraUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, compraUpsertArgs<ExtArgs>>
    ): Prisma__compraClient<$Result.GetResult<Prisma.$compraPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Compras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {compraCountArgs} args - Arguments to filter Compras to count.
     * @example
     * // Count the number of Compras
     * const count = await prisma.compra.count({
     *   where: {
     *     // ... the filter for the Compras we want to count
     *   }
     * })
    **/
    count<T extends compraCountArgs>(
      args?: Subset<T, compraCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompraCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Compra.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompraAggregateArgs>(args: Subset<T, CompraAggregateArgs>): Prisma.PrismaPromise<GetCompraAggregateType<T>>

    /**
     * Group by Compra.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {compraGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends compraGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: compraGroupByArgs['orderBy'] }
        : { orderBy?: compraGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, compraGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompraGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the compra model
   */
  readonly fields: compraFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for compra.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__compraClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    usuario<T extends usuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usuarioDefaultArgs<ExtArgs>>): Prisma__usuarioClient<$Result.GetResult<Prisma.$usuarioPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the compra model
   */ 
  interface compraFieldRefs {
    readonly id_compra: FieldRef<"compra", 'Int'>
    readonly id_usuario: FieldRef<"compra", 'Int'>
    readonly numero_orden: FieldRef<"compra", 'Int'>
    readonly precio_Final: FieldRef<"compra", 'Float'>
    readonly fehca: FieldRef<"compra", 'String'>
  }
    

  // Custom InputTypes

  /**
   * compra findUnique
   */
  export type compraFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the compra
     */
    select?: compraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: compraInclude<ExtArgs> | null
    /**
     * Filter, which compra to fetch.
     */
    where: compraWhereUniqueInput
  }


  /**
   * compra findUniqueOrThrow
   */
  export type compraFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the compra
     */
    select?: compraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: compraInclude<ExtArgs> | null
    /**
     * Filter, which compra to fetch.
     */
    where: compraWhereUniqueInput
  }


  /**
   * compra findFirst
   */
  export type compraFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the compra
     */
    select?: compraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: compraInclude<ExtArgs> | null
    /**
     * Filter, which compra to fetch.
     */
    where?: compraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of compras to fetch.
     */
    orderBy?: compraOrderByWithRelationInput | compraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for compras.
     */
    cursor?: compraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` compras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` compras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of compras.
     */
    distinct?: CompraScalarFieldEnum | CompraScalarFieldEnum[]
  }


  /**
   * compra findFirstOrThrow
   */
  export type compraFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the compra
     */
    select?: compraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: compraInclude<ExtArgs> | null
    /**
     * Filter, which compra to fetch.
     */
    where?: compraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of compras to fetch.
     */
    orderBy?: compraOrderByWithRelationInput | compraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for compras.
     */
    cursor?: compraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` compras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` compras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of compras.
     */
    distinct?: CompraScalarFieldEnum | CompraScalarFieldEnum[]
  }


  /**
   * compra findMany
   */
  export type compraFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the compra
     */
    select?: compraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: compraInclude<ExtArgs> | null
    /**
     * Filter, which compras to fetch.
     */
    where?: compraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of compras to fetch.
     */
    orderBy?: compraOrderByWithRelationInput | compraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing compras.
     */
    cursor?: compraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` compras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` compras.
     */
    skip?: number
    distinct?: CompraScalarFieldEnum | CompraScalarFieldEnum[]
  }


  /**
   * compra create
   */
  export type compraCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the compra
     */
    select?: compraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: compraInclude<ExtArgs> | null
    /**
     * The data needed to create a compra.
     */
    data: XOR<compraCreateInput, compraUncheckedCreateInput>
  }


  /**
   * compra createMany
   */
  export type compraCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many compras.
     */
    data: compraCreateManyInput | compraCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * compra update
   */
  export type compraUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the compra
     */
    select?: compraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: compraInclude<ExtArgs> | null
    /**
     * The data needed to update a compra.
     */
    data: XOR<compraUpdateInput, compraUncheckedUpdateInput>
    /**
     * Choose, which compra to update.
     */
    where: compraWhereUniqueInput
  }


  /**
   * compra updateMany
   */
  export type compraUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update compras.
     */
    data: XOR<compraUpdateManyMutationInput, compraUncheckedUpdateManyInput>
    /**
     * Filter which compras to update
     */
    where?: compraWhereInput
  }


  /**
   * compra upsert
   */
  export type compraUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the compra
     */
    select?: compraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: compraInclude<ExtArgs> | null
    /**
     * The filter to search for the compra to update in case it exists.
     */
    where: compraWhereUniqueInput
    /**
     * In case the compra found by the `where` argument doesn't exist, create a new compra with this data.
     */
    create: XOR<compraCreateInput, compraUncheckedCreateInput>
    /**
     * In case the compra was found with the provided `where` argument, update it with this data.
     */
    update: XOR<compraUpdateInput, compraUncheckedUpdateInput>
  }


  /**
   * compra delete
   */
  export type compraDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the compra
     */
    select?: compraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: compraInclude<ExtArgs> | null
    /**
     * Filter which compra to delete.
     */
    where: compraWhereUniqueInput
  }


  /**
   * compra deleteMany
   */
  export type compraDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which compras to delete
     */
    where?: compraWhereInput
  }


  /**
   * compra without action
   */
  export type compraDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the compra
     */
    select?: compraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: compraInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsuarioScalarFieldEnum: {
    id_usuario: 'id_usuario',
    nombre: 'nombre',
    apellido: 'apellido',
    email: 'email',
    telefono: 'telefono',
    edad: 'edad',
    foto: 'foto'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const ComentarioScalarFieldEnum: {
    id_comentario: 'id_comentario',
    id_usuario: 'id_usuario',
    comentario: 'comentario'
  };

  export type ComentarioScalarFieldEnum = (typeof ComentarioScalarFieldEnum)[keyof typeof ComentarioScalarFieldEnum]


  export const LugarScalarFieldEnum: {
    id_lugar: 'id_lugar',
    id_usuario: 'id_usuario',
    pais: 'pais',
    provincia: 'provincia'
  };

  export type LugarScalarFieldEnum = (typeof LugarScalarFieldEnum)[keyof typeof LugarScalarFieldEnum]


  export const CategoriaScalarFieldEnum: {
    id_categoria: 'id_categoria',
    categoria: 'categoria'
  };

  export type CategoriaScalarFieldEnum = (typeof CategoriaScalarFieldEnum)[keyof typeof CategoriaScalarFieldEnum]


  export const ProductoScalarFieldEnum: {
    id_producto: 'id_producto',
    id_categoria: 'id_categoria',
    marca: 'marca',
    descripcion: 'descripcion',
    precio: 'precio',
    stock: 'stock',
    foto: 'foto'
  };

  export type ProductoScalarFieldEnum = (typeof ProductoScalarFieldEnum)[keyof typeof ProductoScalarFieldEnum]


  export const PublicacionScalarFieldEnum: {
    id_publicacion: 'id_publicacion',
    id_comentario: 'id_comentario',
    titulo: 'titulo',
    descripcion: 'descripcion',
    foto: 'foto'
  };

  export type PublicacionScalarFieldEnum = (typeof PublicacionScalarFieldEnum)[keyof typeof PublicacionScalarFieldEnum]


  export const OrdenScalarFieldEnum: {
    id_item: 'id_item',
    numero_orden: 'numero_orden',
    id_usuario: 'id_usuario',
    id_producto: 'id_producto',
    stock: 'stock',
    precio: 'precio'
  };

  export type OrdenScalarFieldEnum = (typeof OrdenScalarFieldEnum)[keyof typeof OrdenScalarFieldEnum]


  export const CompraScalarFieldEnum: {
    id_compra: 'id_compra',
    id_usuario: 'id_usuario',
    numero_orden: 'numero_orden',
    precio_Final: 'precio_Final',
    fehca: 'fehca'
  };

  export type CompraScalarFieldEnum = (typeof CompraScalarFieldEnum)[keyof typeof CompraScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type usuarioWhereInput = {
    AND?: usuarioWhereInput | usuarioWhereInput[]
    OR?: usuarioWhereInput[]
    NOT?: usuarioWhereInput | usuarioWhereInput[]
    id_usuario?: IntFilter<"usuario"> | number
    nombre?: StringFilter<"usuario"> | string
    apellido?: StringFilter<"usuario"> | string
    email?: StringFilter<"usuario"> | string
    telefono?: StringFilter<"usuario"> | string
    edad?: StringFilter<"usuario"> | string
    foto?: StringFilter<"usuario"> | string
    comentario?: ComentarioListRelationFilter
    lugar?: LugarListRelationFilter
    orden?: OrdenListRelationFilter
    compra?: CompraListRelationFilter
  }

  export type usuarioOrderByWithRelationInput = {
    id_usuario?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    email?: SortOrder
    telefono?: SortOrder
    edad?: SortOrder
    foto?: SortOrder
    comentario?: comentarioOrderByRelationAggregateInput
    lugar?: lugarOrderByRelationAggregateInput
    orden?: ordenOrderByRelationAggregateInput
    compra?: compraOrderByRelationAggregateInput
  }

  export type usuarioWhereUniqueInput = Prisma.AtLeast<{
    id_usuario?: number
    email?: string
    AND?: usuarioWhereInput | usuarioWhereInput[]
    OR?: usuarioWhereInput[]
    NOT?: usuarioWhereInput | usuarioWhereInput[]
    nombre?: StringFilter<"usuario"> | string
    apellido?: StringFilter<"usuario"> | string
    telefono?: StringFilter<"usuario"> | string
    edad?: StringFilter<"usuario"> | string
    foto?: StringFilter<"usuario"> | string
    comentario?: ComentarioListRelationFilter
    lugar?: LugarListRelationFilter
    orden?: OrdenListRelationFilter
    compra?: CompraListRelationFilter
  }, "id_usuario" | "email">

  export type usuarioOrderByWithAggregationInput = {
    id_usuario?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    email?: SortOrder
    telefono?: SortOrder
    edad?: SortOrder
    foto?: SortOrder
    _count?: usuarioCountOrderByAggregateInput
    _avg?: usuarioAvgOrderByAggregateInput
    _max?: usuarioMaxOrderByAggregateInput
    _min?: usuarioMinOrderByAggregateInput
    _sum?: usuarioSumOrderByAggregateInput
  }

  export type usuarioScalarWhereWithAggregatesInput = {
    AND?: usuarioScalarWhereWithAggregatesInput | usuarioScalarWhereWithAggregatesInput[]
    OR?: usuarioScalarWhereWithAggregatesInput[]
    NOT?: usuarioScalarWhereWithAggregatesInput | usuarioScalarWhereWithAggregatesInput[]
    id_usuario?: IntWithAggregatesFilter<"usuario"> | number
    nombre?: StringWithAggregatesFilter<"usuario"> | string
    apellido?: StringWithAggregatesFilter<"usuario"> | string
    email?: StringWithAggregatesFilter<"usuario"> | string
    telefono?: StringWithAggregatesFilter<"usuario"> | string
    edad?: StringWithAggregatesFilter<"usuario"> | string
    foto?: StringWithAggregatesFilter<"usuario"> | string
  }

  export type comentarioWhereInput = {
    AND?: comentarioWhereInput | comentarioWhereInput[]
    OR?: comentarioWhereInput[]
    NOT?: comentarioWhereInput | comentarioWhereInput[]
    id_comentario?: IntFilter<"comentario"> | number
    id_usuario?: IntFilter<"comentario"> | number
    comentario?: StringFilter<"comentario"> | string
    usuario?: XOR<UsuarioRelationFilter, usuarioWhereInput>
    publicacion?: PublicacionListRelationFilter
  }

  export type comentarioOrderByWithRelationInput = {
    id_comentario?: SortOrder
    id_usuario?: SortOrder
    comentario?: SortOrder
    usuario?: usuarioOrderByWithRelationInput
    publicacion?: publicacionOrderByRelationAggregateInput
  }

  export type comentarioWhereUniqueInput = Prisma.AtLeast<{
    id_comentario?: number
    AND?: comentarioWhereInput | comentarioWhereInput[]
    OR?: comentarioWhereInput[]
    NOT?: comentarioWhereInput | comentarioWhereInput[]
    id_usuario?: IntFilter<"comentario"> | number
    comentario?: StringFilter<"comentario"> | string
    usuario?: XOR<UsuarioRelationFilter, usuarioWhereInput>
    publicacion?: PublicacionListRelationFilter
  }, "id_comentario">

  export type comentarioOrderByWithAggregationInput = {
    id_comentario?: SortOrder
    id_usuario?: SortOrder
    comentario?: SortOrder
    _count?: comentarioCountOrderByAggregateInput
    _avg?: comentarioAvgOrderByAggregateInput
    _max?: comentarioMaxOrderByAggregateInput
    _min?: comentarioMinOrderByAggregateInput
    _sum?: comentarioSumOrderByAggregateInput
  }

  export type comentarioScalarWhereWithAggregatesInput = {
    AND?: comentarioScalarWhereWithAggregatesInput | comentarioScalarWhereWithAggregatesInput[]
    OR?: comentarioScalarWhereWithAggregatesInput[]
    NOT?: comentarioScalarWhereWithAggregatesInput | comentarioScalarWhereWithAggregatesInput[]
    id_comentario?: IntWithAggregatesFilter<"comentario"> | number
    id_usuario?: IntWithAggregatesFilter<"comentario"> | number
    comentario?: StringWithAggregatesFilter<"comentario"> | string
  }

  export type lugarWhereInput = {
    AND?: lugarWhereInput | lugarWhereInput[]
    OR?: lugarWhereInput[]
    NOT?: lugarWhereInput | lugarWhereInput[]
    id_lugar?: IntFilter<"lugar"> | number
    id_usuario?: IntFilter<"lugar"> | number
    pais?: StringFilter<"lugar"> | string
    provincia?: StringFilter<"lugar"> | string
    usuario?: XOR<UsuarioRelationFilter, usuarioWhereInput>
  }

  export type lugarOrderByWithRelationInput = {
    id_lugar?: SortOrder
    id_usuario?: SortOrder
    pais?: SortOrder
    provincia?: SortOrder
    usuario?: usuarioOrderByWithRelationInput
  }

  export type lugarWhereUniqueInput = Prisma.AtLeast<{
    id_lugar?: number
    id_usuario?: number
    AND?: lugarWhereInput | lugarWhereInput[]
    OR?: lugarWhereInput[]
    NOT?: lugarWhereInput | lugarWhereInput[]
    pais?: StringFilter<"lugar"> | string
    provincia?: StringFilter<"lugar"> | string
    usuario?: XOR<UsuarioRelationFilter, usuarioWhereInput>
  }, "id_lugar" | "id_usuario">

  export type lugarOrderByWithAggregationInput = {
    id_lugar?: SortOrder
    id_usuario?: SortOrder
    pais?: SortOrder
    provincia?: SortOrder
    _count?: lugarCountOrderByAggregateInput
    _avg?: lugarAvgOrderByAggregateInput
    _max?: lugarMaxOrderByAggregateInput
    _min?: lugarMinOrderByAggregateInput
    _sum?: lugarSumOrderByAggregateInput
  }

  export type lugarScalarWhereWithAggregatesInput = {
    AND?: lugarScalarWhereWithAggregatesInput | lugarScalarWhereWithAggregatesInput[]
    OR?: lugarScalarWhereWithAggregatesInput[]
    NOT?: lugarScalarWhereWithAggregatesInput | lugarScalarWhereWithAggregatesInput[]
    id_lugar?: IntWithAggregatesFilter<"lugar"> | number
    id_usuario?: IntWithAggregatesFilter<"lugar"> | number
    pais?: StringWithAggregatesFilter<"lugar"> | string
    provincia?: StringWithAggregatesFilter<"lugar"> | string
  }

  export type categoriaWhereInput = {
    AND?: categoriaWhereInput | categoriaWhereInput[]
    OR?: categoriaWhereInput[]
    NOT?: categoriaWhereInput | categoriaWhereInput[]
    id_categoria?: IntFilter<"categoria"> | number
    categoria?: StringFilter<"categoria"> | string
    producto?: ProductoListRelationFilter
  }

  export type categoriaOrderByWithRelationInput = {
    id_categoria?: SortOrder
    categoria?: SortOrder
    producto?: productoOrderByRelationAggregateInput
  }

  export type categoriaWhereUniqueInput = Prisma.AtLeast<{
    id_categoria?: number
    AND?: categoriaWhereInput | categoriaWhereInput[]
    OR?: categoriaWhereInput[]
    NOT?: categoriaWhereInput | categoriaWhereInput[]
    categoria?: StringFilter<"categoria"> | string
    producto?: ProductoListRelationFilter
  }, "id_categoria">

  export type categoriaOrderByWithAggregationInput = {
    id_categoria?: SortOrder
    categoria?: SortOrder
    _count?: categoriaCountOrderByAggregateInput
    _avg?: categoriaAvgOrderByAggregateInput
    _max?: categoriaMaxOrderByAggregateInput
    _min?: categoriaMinOrderByAggregateInput
    _sum?: categoriaSumOrderByAggregateInput
  }

  export type categoriaScalarWhereWithAggregatesInput = {
    AND?: categoriaScalarWhereWithAggregatesInput | categoriaScalarWhereWithAggregatesInput[]
    OR?: categoriaScalarWhereWithAggregatesInput[]
    NOT?: categoriaScalarWhereWithAggregatesInput | categoriaScalarWhereWithAggregatesInput[]
    id_categoria?: IntWithAggregatesFilter<"categoria"> | number
    categoria?: StringWithAggregatesFilter<"categoria"> | string
  }

  export type productoWhereInput = {
    AND?: productoWhereInput | productoWhereInput[]
    OR?: productoWhereInput[]
    NOT?: productoWhereInput | productoWhereInput[]
    id_producto?: IntFilter<"producto"> | number
    id_categoria?: IntFilter<"producto"> | number
    marca?: StringFilter<"producto"> | string
    descripcion?: StringFilter<"producto"> | string
    precio?: FloatFilter<"producto"> | number
    stock?: IntFilter<"producto"> | number
    foto?: StringFilter<"producto"> | string
    categoria?: XOR<CategoriaRelationFilter, categoriaWhereInput>
    orden?: OrdenListRelationFilter
  }

  export type productoOrderByWithRelationInput = {
    id_producto?: SortOrder
    id_categoria?: SortOrder
    marca?: SortOrder
    descripcion?: SortOrder
    precio?: SortOrder
    stock?: SortOrder
    foto?: SortOrder
    categoria?: categoriaOrderByWithRelationInput
    orden?: ordenOrderByRelationAggregateInput
  }

  export type productoWhereUniqueInput = Prisma.AtLeast<{
    id_producto?: number
    AND?: productoWhereInput | productoWhereInput[]
    OR?: productoWhereInput[]
    NOT?: productoWhereInput | productoWhereInput[]
    id_categoria?: IntFilter<"producto"> | number
    marca?: StringFilter<"producto"> | string
    descripcion?: StringFilter<"producto"> | string
    precio?: FloatFilter<"producto"> | number
    stock?: IntFilter<"producto"> | number
    foto?: StringFilter<"producto"> | string
    categoria?: XOR<CategoriaRelationFilter, categoriaWhereInput>
    orden?: OrdenListRelationFilter
  }, "id_producto">

  export type productoOrderByWithAggregationInput = {
    id_producto?: SortOrder
    id_categoria?: SortOrder
    marca?: SortOrder
    descripcion?: SortOrder
    precio?: SortOrder
    stock?: SortOrder
    foto?: SortOrder
    _count?: productoCountOrderByAggregateInput
    _avg?: productoAvgOrderByAggregateInput
    _max?: productoMaxOrderByAggregateInput
    _min?: productoMinOrderByAggregateInput
    _sum?: productoSumOrderByAggregateInput
  }

  export type productoScalarWhereWithAggregatesInput = {
    AND?: productoScalarWhereWithAggregatesInput | productoScalarWhereWithAggregatesInput[]
    OR?: productoScalarWhereWithAggregatesInput[]
    NOT?: productoScalarWhereWithAggregatesInput | productoScalarWhereWithAggregatesInput[]
    id_producto?: IntWithAggregatesFilter<"producto"> | number
    id_categoria?: IntWithAggregatesFilter<"producto"> | number
    marca?: StringWithAggregatesFilter<"producto"> | string
    descripcion?: StringWithAggregatesFilter<"producto"> | string
    precio?: FloatWithAggregatesFilter<"producto"> | number
    stock?: IntWithAggregatesFilter<"producto"> | number
    foto?: StringWithAggregatesFilter<"producto"> | string
  }

  export type publicacionWhereInput = {
    AND?: publicacionWhereInput | publicacionWhereInput[]
    OR?: publicacionWhereInput[]
    NOT?: publicacionWhereInput | publicacionWhereInput[]
    id_publicacion?: IntFilter<"publicacion"> | number
    id_comentario?: IntFilter<"publicacion"> | number
    titulo?: StringFilter<"publicacion"> | string
    descripcion?: StringNullableFilter<"publicacion"> | string | null
    foto?: StringNullableFilter<"publicacion"> | string | null
    comentario?: XOR<ComentarioRelationFilter, comentarioWhereInput>
  }

  export type publicacionOrderByWithRelationInput = {
    id_publicacion?: SortOrder
    id_comentario?: SortOrder
    titulo?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    foto?: SortOrderInput | SortOrder
    comentario?: comentarioOrderByWithRelationInput
  }

  export type publicacionWhereUniqueInput = Prisma.AtLeast<{
    id_publicacion?: number
    AND?: publicacionWhereInput | publicacionWhereInput[]
    OR?: publicacionWhereInput[]
    NOT?: publicacionWhereInput | publicacionWhereInput[]
    id_comentario?: IntFilter<"publicacion"> | number
    titulo?: StringFilter<"publicacion"> | string
    descripcion?: StringNullableFilter<"publicacion"> | string | null
    foto?: StringNullableFilter<"publicacion"> | string | null
    comentario?: XOR<ComentarioRelationFilter, comentarioWhereInput>
  }, "id_publicacion">

  export type publicacionOrderByWithAggregationInput = {
    id_publicacion?: SortOrder
    id_comentario?: SortOrder
    titulo?: SortOrder
    descripcion?: SortOrderInput | SortOrder
    foto?: SortOrderInput | SortOrder
    _count?: publicacionCountOrderByAggregateInput
    _avg?: publicacionAvgOrderByAggregateInput
    _max?: publicacionMaxOrderByAggregateInput
    _min?: publicacionMinOrderByAggregateInput
    _sum?: publicacionSumOrderByAggregateInput
  }

  export type publicacionScalarWhereWithAggregatesInput = {
    AND?: publicacionScalarWhereWithAggregatesInput | publicacionScalarWhereWithAggregatesInput[]
    OR?: publicacionScalarWhereWithAggregatesInput[]
    NOT?: publicacionScalarWhereWithAggregatesInput | publicacionScalarWhereWithAggregatesInput[]
    id_publicacion?: IntWithAggregatesFilter<"publicacion"> | number
    id_comentario?: IntWithAggregatesFilter<"publicacion"> | number
    titulo?: StringWithAggregatesFilter<"publicacion"> | string
    descripcion?: StringNullableWithAggregatesFilter<"publicacion"> | string | null
    foto?: StringNullableWithAggregatesFilter<"publicacion"> | string | null
  }

  export type ordenWhereInput = {
    AND?: ordenWhereInput | ordenWhereInput[]
    OR?: ordenWhereInput[]
    NOT?: ordenWhereInput | ordenWhereInput[]
    id_item?: IntFilter<"orden"> | number
    numero_orden?: IntFilter<"orden"> | number
    id_usuario?: IntFilter<"orden"> | number
    id_producto?: IntFilter<"orden"> | number
    stock?: IntFilter<"orden"> | number
    precio?: FloatFilter<"orden"> | number
    usuario?: XOR<UsuarioRelationFilter, usuarioWhereInput>
    producto?: XOR<ProductoRelationFilter, productoWhereInput>
  }

  export type ordenOrderByWithRelationInput = {
    id_item?: SortOrder
    numero_orden?: SortOrder
    id_usuario?: SortOrder
    id_producto?: SortOrder
    stock?: SortOrder
    precio?: SortOrder
    usuario?: usuarioOrderByWithRelationInput
    producto?: productoOrderByWithRelationInput
  }

  export type ordenWhereUniqueInput = Prisma.AtLeast<{
    id_item?: number
    AND?: ordenWhereInput | ordenWhereInput[]
    OR?: ordenWhereInput[]
    NOT?: ordenWhereInput | ordenWhereInput[]
    numero_orden?: IntFilter<"orden"> | number
    id_usuario?: IntFilter<"orden"> | number
    id_producto?: IntFilter<"orden"> | number
    stock?: IntFilter<"orden"> | number
    precio?: FloatFilter<"orden"> | number
    usuario?: XOR<UsuarioRelationFilter, usuarioWhereInput>
    producto?: XOR<ProductoRelationFilter, productoWhereInput>
  }, "id_item">

  export type ordenOrderByWithAggregationInput = {
    id_item?: SortOrder
    numero_orden?: SortOrder
    id_usuario?: SortOrder
    id_producto?: SortOrder
    stock?: SortOrder
    precio?: SortOrder
    _count?: ordenCountOrderByAggregateInput
    _avg?: ordenAvgOrderByAggregateInput
    _max?: ordenMaxOrderByAggregateInput
    _min?: ordenMinOrderByAggregateInput
    _sum?: ordenSumOrderByAggregateInput
  }

  export type ordenScalarWhereWithAggregatesInput = {
    AND?: ordenScalarWhereWithAggregatesInput | ordenScalarWhereWithAggregatesInput[]
    OR?: ordenScalarWhereWithAggregatesInput[]
    NOT?: ordenScalarWhereWithAggregatesInput | ordenScalarWhereWithAggregatesInput[]
    id_item?: IntWithAggregatesFilter<"orden"> | number
    numero_orden?: IntWithAggregatesFilter<"orden"> | number
    id_usuario?: IntWithAggregatesFilter<"orden"> | number
    id_producto?: IntWithAggregatesFilter<"orden"> | number
    stock?: IntWithAggregatesFilter<"orden"> | number
    precio?: FloatWithAggregatesFilter<"orden"> | number
  }

  export type compraWhereInput = {
    AND?: compraWhereInput | compraWhereInput[]
    OR?: compraWhereInput[]
    NOT?: compraWhereInput | compraWhereInput[]
    id_compra?: IntFilter<"compra"> | number
    id_usuario?: IntFilter<"compra"> | number
    numero_orden?: IntFilter<"compra"> | number
    precio_Final?: FloatFilter<"compra"> | number
    fehca?: StringFilter<"compra"> | string
    usuario?: XOR<UsuarioRelationFilter, usuarioWhereInput>
  }

  export type compraOrderByWithRelationInput = {
    id_compra?: SortOrder
    id_usuario?: SortOrder
    numero_orden?: SortOrder
    precio_Final?: SortOrder
    fehca?: SortOrder
    usuario?: usuarioOrderByWithRelationInput
  }

  export type compraWhereUniqueInput = Prisma.AtLeast<{
    id_compra?: number
    numero_orden?: number
    AND?: compraWhereInput | compraWhereInput[]
    OR?: compraWhereInput[]
    NOT?: compraWhereInput | compraWhereInput[]
    id_usuario?: IntFilter<"compra"> | number
    precio_Final?: FloatFilter<"compra"> | number
    fehca?: StringFilter<"compra"> | string
    usuario?: XOR<UsuarioRelationFilter, usuarioWhereInput>
  }, "id_compra" | "numero_orden">

  export type compraOrderByWithAggregationInput = {
    id_compra?: SortOrder
    id_usuario?: SortOrder
    numero_orden?: SortOrder
    precio_Final?: SortOrder
    fehca?: SortOrder
    _count?: compraCountOrderByAggregateInput
    _avg?: compraAvgOrderByAggregateInput
    _max?: compraMaxOrderByAggregateInput
    _min?: compraMinOrderByAggregateInput
    _sum?: compraSumOrderByAggregateInput
  }

  export type compraScalarWhereWithAggregatesInput = {
    AND?: compraScalarWhereWithAggregatesInput | compraScalarWhereWithAggregatesInput[]
    OR?: compraScalarWhereWithAggregatesInput[]
    NOT?: compraScalarWhereWithAggregatesInput | compraScalarWhereWithAggregatesInput[]
    id_compra?: IntWithAggregatesFilter<"compra"> | number
    id_usuario?: IntWithAggregatesFilter<"compra"> | number
    numero_orden?: IntWithAggregatesFilter<"compra"> | number
    precio_Final?: FloatWithAggregatesFilter<"compra"> | number
    fehca?: StringWithAggregatesFilter<"compra"> | string
  }

  export type usuarioCreateInput = {
    nombre: string
    apellido: string
    email: string
    telefono: string
    edad: string
    foto?: string
    comentario?: comentarioCreateNestedManyWithoutUsuarioInput
    lugar?: lugarCreateNestedManyWithoutUsuarioInput
    orden?: ordenCreateNestedManyWithoutUsuarioInput
    compra?: compraCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioUncheckedCreateInput = {
    id_usuario?: number
    nombre: string
    apellido: string
    email: string
    telefono: string
    edad: string
    foto?: string
    comentario?: comentarioUncheckedCreateNestedManyWithoutUsuarioInput
    lugar?: lugarUncheckedCreateNestedManyWithoutUsuarioInput
    orden?: ordenUncheckedCreateNestedManyWithoutUsuarioInput
    compra?: compraUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    edad?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    comentario?: comentarioUpdateManyWithoutUsuarioNestedInput
    lugar?: lugarUpdateManyWithoutUsuarioNestedInput
    orden?: ordenUpdateManyWithoutUsuarioNestedInput
    compra?: compraUpdateManyWithoutUsuarioNestedInput
  }

  export type usuarioUncheckedUpdateInput = {
    id_usuario?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    edad?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    comentario?: comentarioUncheckedUpdateManyWithoutUsuarioNestedInput
    lugar?: lugarUncheckedUpdateManyWithoutUsuarioNestedInput
    orden?: ordenUncheckedUpdateManyWithoutUsuarioNestedInput
    compra?: compraUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type usuarioCreateManyInput = {
    id_usuario?: number
    nombre: string
    apellido: string
    email: string
    telefono: string
    edad: string
    foto?: string
  }

  export type usuarioUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    edad?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
  }

  export type usuarioUncheckedUpdateManyInput = {
    id_usuario?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    edad?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
  }

  export type comentarioCreateInput = {
    comentario: string
    usuario: usuarioCreateNestedOneWithoutComentarioInput
    publicacion?: publicacionCreateNestedManyWithoutComentarioInput
  }

  export type comentarioUncheckedCreateInput = {
    id_comentario?: number
    id_usuario: number
    comentario: string
    publicacion?: publicacionUncheckedCreateNestedManyWithoutComentarioInput
  }

  export type comentarioUpdateInput = {
    comentario?: StringFieldUpdateOperationsInput | string
    usuario?: usuarioUpdateOneRequiredWithoutComentarioNestedInput
    publicacion?: publicacionUpdateManyWithoutComentarioNestedInput
  }

  export type comentarioUncheckedUpdateInput = {
    id_comentario?: IntFieldUpdateOperationsInput | number
    id_usuario?: IntFieldUpdateOperationsInput | number
    comentario?: StringFieldUpdateOperationsInput | string
    publicacion?: publicacionUncheckedUpdateManyWithoutComentarioNestedInput
  }

  export type comentarioCreateManyInput = {
    id_comentario?: number
    id_usuario: number
    comentario: string
  }

  export type comentarioUpdateManyMutationInput = {
    comentario?: StringFieldUpdateOperationsInput | string
  }

  export type comentarioUncheckedUpdateManyInput = {
    id_comentario?: IntFieldUpdateOperationsInput | number
    id_usuario?: IntFieldUpdateOperationsInput | number
    comentario?: StringFieldUpdateOperationsInput | string
  }

  export type lugarCreateInput = {
    pais: string
    provincia: string
    usuario: usuarioCreateNestedOneWithoutLugarInput
  }

  export type lugarUncheckedCreateInput = {
    id_lugar?: number
    id_usuario: number
    pais: string
    provincia: string
  }

  export type lugarUpdateInput = {
    pais?: StringFieldUpdateOperationsInput | string
    provincia?: StringFieldUpdateOperationsInput | string
    usuario?: usuarioUpdateOneRequiredWithoutLugarNestedInput
  }

  export type lugarUncheckedUpdateInput = {
    id_lugar?: IntFieldUpdateOperationsInput | number
    id_usuario?: IntFieldUpdateOperationsInput | number
    pais?: StringFieldUpdateOperationsInput | string
    provincia?: StringFieldUpdateOperationsInput | string
  }

  export type lugarCreateManyInput = {
    id_lugar?: number
    id_usuario: number
    pais: string
    provincia: string
  }

  export type lugarUpdateManyMutationInput = {
    pais?: StringFieldUpdateOperationsInput | string
    provincia?: StringFieldUpdateOperationsInput | string
  }

  export type lugarUncheckedUpdateManyInput = {
    id_lugar?: IntFieldUpdateOperationsInput | number
    id_usuario?: IntFieldUpdateOperationsInput | number
    pais?: StringFieldUpdateOperationsInput | string
    provincia?: StringFieldUpdateOperationsInput | string
  }

  export type categoriaCreateInput = {
    categoria: string
    producto?: productoCreateNestedManyWithoutCategoriaInput
  }

  export type categoriaUncheckedCreateInput = {
    id_categoria?: number
    categoria: string
    producto?: productoUncheckedCreateNestedManyWithoutCategoriaInput
  }

  export type categoriaUpdateInput = {
    categoria?: StringFieldUpdateOperationsInput | string
    producto?: productoUpdateManyWithoutCategoriaNestedInput
  }

  export type categoriaUncheckedUpdateInput = {
    id_categoria?: IntFieldUpdateOperationsInput | number
    categoria?: StringFieldUpdateOperationsInput | string
    producto?: productoUncheckedUpdateManyWithoutCategoriaNestedInput
  }

  export type categoriaCreateManyInput = {
    id_categoria?: number
    categoria: string
  }

  export type categoriaUpdateManyMutationInput = {
    categoria?: StringFieldUpdateOperationsInput | string
  }

  export type categoriaUncheckedUpdateManyInput = {
    id_categoria?: IntFieldUpdateOperationsInput | number
    categoria?: StringFieldUpdateOperationsInput | string
  }

  export type productoCreateInput = {
    marca: string
    descripcion: string
    precio: number
    stock: number
    foto?: string
    categoria: categoriaCreateNestedOneWithoutProductoInput
    orden?: ordenCreateNestedManyWithoutProductoInput
  }

  export type productoUncheckedCreateInput = {
    id_producto?: number
    id_categoria: number
    marca: string
    descripcion: string
    precio: number
    stock: number
    foto?: string
    orden?: ordenUncheckedCreateNestedManyWithoutProductoInput
  }

  export type productoUpdateInput = {
    marca?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    foto?: StringFieldUpdateOperationsInput | string
    categoria?: categoriaUpdateOneRequiredWithoutProductoNestedInput
    orden?: ordenUpdateManyWithoutProductoNestedInput
  }

  export type productoUncheckedUpdateInput = {
    id_producto?: IntFieldUpdateOperationsInput | number
    id_categoria?: IntFieldUpdateOperationsInput | number
    marca?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    foto?: StringFieldUpdateOperationsInput | string
    orden?: ordenUncheckedUpdateManyWithoutProductoNestedInput
  }

  export type productoCreateManyInput = {
    id_producto?: number
    id_categoria: number
    marca: string
    descripcion: string
    precio: number
    stock: number
    foto?: string
  }

  export type productoUpdateManyMutationInput = {
    marca?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    foto?: StringFieldUpdateOperationsInput | string
  }

  export type productoUncheckedUpdateManyInput = {
    id_producto?: IntFieldUpdateOperationsInput | number
    id_categoria?: IntFieldUpdateOperationsInput | number
    marca?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    foto?: StringFieldUpdateOperationsInput | string
  }

  export type publicacionCreateInput = {
    titulo: string
    descripcion?: string | null
    foto?: string | null
    comentario: comentarioCreateNestedOneWithoutPublicacionInput
  }

  export type publicacionUncheckedCreateInput = {
    id_publicacion?: number
    id_comentario: number
    titulo: string
    descripcion?: string | null
    foto?: string | null
  }

  export type publicacionUpdateInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    comentario?: comentarioUpdateOneRequiredWithoutPublicacionNestedInput
  }

  export type publicacionUncheckedUpdateInput = {
    id_publicacion?: IntFieldUpdateOperationsInput | number
    id_comentario?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    foto?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type publicacionCreateManyInput = {
    id_publicacion?: number
    id_comentario: number
    titulo: string
    descripcion?: string | null
    foto?: string | null
  }

  export type publicacionUpdateManyMutationInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    foto?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type publicacionUncheckedUpdateManyInput = {
    id_publicacion?: IntFieldUpdateOperationsInput | number
    id_comentario?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    foto?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ordenCreateInput = {
    numero_orden: number
    stock: number
    precio: number
    usuario: usuarioCreateNestedOneWithoutOrdenInput
    producto: productoCreateNestedOneWithoutOrdenInput
  }

  export type ordenUncheckedCreateInput = {
    id_item?: number
    numero_orden: number
    id_usuario: number
    id_producto: number
    stock: number
    precio: number
  }

  export type ordenUpdateInput = {
    numero_orden?: IntFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    precio?: FloatFieldUpdateOperationsInput | number
    usuario?: usuarioUpdateOneRequiredWithoutOrdenNestedInput
    producto?: productoUpdateOneRequiredWithoutOrdenNestedInput
  }

  export type ordenUncheckedUpdateInput = {
    id_item?: IntFieldUpdateOperationsInput | number
    numero_orden?: IntFieldUpdateOperationsInput | number
    id_usuario?: IntFieldUpdateOperationsInput | number
    id_producto?: IntFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    precio?: FloatFieldUpdateOperationsInput | number
  }

  export type ordenCreateManyInput = {
    id_item?: number
    numero_orden: number
    id_usuario: number
    id_producto: number
    stock: number
    precio: number
  }

  export type ordenUpdateManyMutationInput = {
    numero_orden?: IntFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    precio?: FloatFieldUpdateOperationsInput | number
  }

  export type ordenUncheckedUpdateManyInput = {
    id_item?: IntFieldUpdateOperationsInput | number
    numero_orden?: IntFieldUpdateOperationsInput | number
    id_usuario?: IntFieldUpdateOperationsInput | number
    id_producto?: IntFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    precio?: FloatFieldUpdateOperationsInput | number
  }

  export type compraCreateInput = {
    numero_orden: number
    precio_Final: number
    fehca: string
    usuario: usuarioCreateNestedOneWithoutCompraInput
  }

  export type compraUncheckedCreateInput = {
    id_compra?: number
    id_usuario: number
    numero_orden: number
    precio_Final: number
    fehca: string
  }

  export type compraUpdateInput = {
    numero_orden?: IntFieldUpdateOperationsInput | number
    precio_Final?: FloatFieldUpdateOperationsInput | number
    fehca?: StringFieldUpdateOperationsInput | string
    usuario?: usuarioUpdateOneRequiredWithoutCompraNestedInput
  }

  export type compraUncheckedUpdateInput = {
    id_compra?: IntFieldUpdateOperationsInput | number
    id_usuario?: IntFieldUpdateOperationsInput | number
    numero_orden?: IntFieldUpdateOperationsInput | number
    precio_Final?: FloatFieldUpdateOperationsInput | number
    fehca?: StringFieldUpdateOperationsInput | string
  }

  export type compraCreateManyInput = {
    id_compra?: number
    id_usuario: number
    numero_orden: number
    precio_Final: number
    fehca: string
  }

  export type compraUpdateManyMutationInput = {
    numero_orden?: IntFieldUpdateOperationsInput | number
    precio_Final?: FloatFieldUpdateOperationsInput | number
    fehca?: StringFieldUpdateOperationsInput | string
  }

  export type compraUncheckedUpdateManyInput = {
    id_compra?: IntFieldUpdateOperationsInput | number
    id_usuario?: IntFieldUpdateOperationsInput | number
    numero_orden?: IntFieldUpdateOperationsInput | number
    precio_Final?: FloatFieldUpdateOperationsInput | number
    fehca?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type ComentarioListRelationFilter = {
    every?: comentarioWhereInput
    some?: comentarioWhereInput
    none?: comentarioWhereInput
  }

  export type LugarListRelationFilter = {
    every?: lugarWhereInput
    some?: lugarWhereInput
    none?: lugarWhereInput
  }

  export type OrdenListRelationFilter = {
    every?: ordenWhereInput
    some?: ordenWhereInput
    none?: ordenWhereInput
  }

  export type CompraListRelationFilter = {
    every?: compraWhereInput
    some?: compraWhereInput
    none?: compraWhereInput
  }

  export type comentarioOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type lugarOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ordenOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type compraOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usuarioCountOrderByAggregateInput = {
    id_usuario?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    email?: SortOrder
    telefono?: SortOrder
    edad?: SortOrder
    foto?: SortOrder
  }

  export type usuarioAvgOrderByAggregateInput = {
    id_usuario?: SortOrder
  }

  export type usuarioMaxOrderByAggregateInput = {
    id_usuario?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    email?: SortOrder
    telefono?: SortOrder
    edad?: SortOrder
    foto?: SortOrder
  }

  export type usuarioMinOrderByAggregateInput = {
    id_usuario?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    email?: SortOrder
    telefono?: SortOrder
    edad?: SortOrder
    foto?: SortOrder
  }

  export type usuarioSumOrderByAggregateInput = {
    id_usuario?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type UsuarioRelationFilter = {
    is?: usuarioWhereInput
    isNot?: usuarioWhereInput
  }

  export type PublicacionListRelationFilter = {
    every?: publicacionWhereInput
    some?: publicacionWhereInput
    none?: publicacionWhereInput
  }

  export type publicacionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type comentarioCountOrderByAggregateInput = {
    id_comentario?: SortOrder
    id_usuario?: SortOrder
    comentario?: SortOrder
  }

  export type comentarioAvgOrderByAggregateInput = {
    id_comentario?: SortOrder
    id_usuario?: SortOrder
  }

  export type comentarioMaxOrderByAggregateInput = {
    id_comentario?: SortOrder
    id_usuario?: SortOrder
    comentario?: SortOrder
  }

  export type comentarioMinOrderByAggregateInput = {
    id_comentario?: SortOrder
    id_usuario?: SortOrder
    comentario?: SortOrder
  }

  export type comentarioSumOrderByAggregateInput = {
    id_comentario?: SortOrder
    id_usuario?: SortOrder
  }

  export type lugarCountOrderByAggregateInput = {
    id_lugar?: SortOrder
    id_usuario?: SortOrder
    pais?: SortOrder
    provincia?: SortOrder
  }

  export type lugarAvgOrderByAggregateInput = {
    id_lugar?: SortOrder
    id_usuario?: SortOrder
  }

  export type lugarMaxOrderByAggregateInput = {
    id_lugar?: SortOrder
    id_usuario?: SortOrder
    pais?: SortOrder
    provincia?: SortOrder
  }

  export type lugarMinOrderByAggregateInput = {
    id_lugar?: SortOrder
    id_usuario?: SortOrder
    pais?: SortOrder
    provincia?: SortOrder
  }

  export type lugarSumOrderByAggregateInput = {
    id_lugar?: SortOrder
    id_usuario?: SortOrder
  }

  export type ProductoListRelationFilter = {
    every?: productoWhereInput
    some?: productoWhereInput
    none?: productoWhereInput
  }

  export type productoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type categoriaCountOrderByAggregateInput = {
    id_categoria?: SortOrder
    categoria?: SortOrder
  }

  export type categoriaAvgOrderByAggregateInput = {
    id_categoria?: SortOrder
  }

  export type categoriaMaxOrderByAggregateInput = {
    id_categoria?: SortOrder
    categoria?: SortOrder
  }

  export type categoriaMinOrderByAggregateInput = {
    id_categoria?: SortOrder
    categoria?: SortOrder
  }

  export type categoriaSumOrderByAggregateInput = {
    id_categoria?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type CategoriaRelationFilter = {
    is?: categoriaWhereInput
    isNot?: categoriaWhereInput
  }

  export type productoCountOrderByAggregateInput = {
    id_producto?: SortOrder
    id_categoria?: SortOrder
    marca?: SortOrder
    descripcion?: SortOrder
    precio?: SortOrder
    stock?: SortOrder
    foto?: SortOrder
  }

  export type productoAvgOrderByAggregateInput = {
    id_producto?: SortOrder
    id_categoria?: SortOrder
    precio?: SortOrder
    stock?: SortOrder
  }

  export type productoMaxOrderByAggregateInput = {
    id_producto?: SortOrder
    id_categoria?: SortOrder
    marca?: SortOrder
    descripcion?: SortOrder
    precio?: SortOrder
    stock?: SortOrder
    foto?: SortOrder
  }

  export type productoMinOrderByAggregateInput = {
    id_producto?: SortOrder
    id_categoria?: SortOrder
    marca?: SortOrder
    descripcion?: SortOrder
    precio?: SortOrder
    stock?: SortOrder
    foto?: SortOrder
  }

  export type productoSumOrderByAggregateInput = {
    id_producto?: SortOrder
    id_categoria?: SortOrder
    precio?: SortOrder
    stock?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type ComentarioRelationFilter = {
    is?: comentarioWhereInput
    isNot?: comentarioWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type publicacionCountOrderByAggregateInput = {
    id_publicacion?: SortOrder
    id_comentario?: SortOrder
    titulo?: SortOrder
    descripcion?: SortOrder
    foto?: SortOrder
  }

  export type publicacionAvgOrderByAggregateInput = {
    id_publicacion?: SortOrder
    id_comentario?: SortOrder
  }

  export type publicacionMaxOrderByAggregateInput = {
    id_publicacion?: SortOrder
    id_comentario?: SortOrder
    titulo?: SortOrder
    descripcion?: SortOrder
    foto?: SortOrder
  }

  export type publicacionMinOrderByAggregateInput = {
    id_publicacion?: SortOrder
    id_comentario?: SortOrder
    titulo?: SortOrder
    descripcion?: SortOrder
    foto?: SortOrder
  }

  export type publicacionSumOrderByAggregateInput = {
    id_publicacion?: SortOrder
    id_comentario?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type ProductoRelationFilter = {
    is?: productoWhereInput
    isNot?: productoWhereInput
  }

  export type ordenCountOrderByAggregateInput = {
    id_item?: SortOrder
    numero_orden?: SortOrder
    id_usuario?: SortOrder
    id_producto?: SortOrder
    stock?: SortOrder
    precio?: SortOrder
  }

  export type ordenAvgOrderByAggregateInput = {
    id_item?: SortOrder
    numero_orden?: SortOrder
    id_usuario?: SortOrder
    id_producto?: SortOrder
    stock?: SortOrder
    precio?: SortOrder
  }

  export type ordenMaxOrderByAggregateInput = {
    id_item?: SortOrder
    numero_orden?: SortOrder
    id_usuario?: SortOrder
    id_producto?: SortOrder
    stock?: SortOrder
    precio?: SortOrder
  }

  export type ordenMinOrderByAggregateInput = {
    id_item?: SortOrder
    numero_orden?: SortOrder
    id_usuario?: SortOrder
    id_producto?: SortOrder
    stock?: SortOrder
    precio?: SortOrder
  }

  export type ordenSumOrderByAggregateInput = {
    id_item?: SortOrder
    numero_orden?: SortOrder
    id_usuario?: SortOrder
    id_producto?: SortOrder
    stock?: SortOrder
    precio?: SortOrder
  }

  export type compraCountOrderByAggregateInput = {
    id_compra?: SortOrder
    id_usuario?: SortOrder
    numero_orden?: SortOrder
    precio_Final?: SortOrder
    fehca?: SortOrder
  }

  export type compraAvgOrderByAggregateInput = {
    id_compra?: SortOrder
    id_usuario?: SortOrder
    numero_orden?: SortOrder
    precio_Final?: SortOrder
  }

  export type compraMaxOrderByAggregateInput = {
    id_compra?: SortOrder
    id_usuario?: SortOrder
    numero_orden?: SortOrder
    precio_Final?: SortOrder
    fehca?: SortOrder
  }

  export type compraMinOrderByAggregateInput = {
    id_compra?: SortOrder
    id_usuario?: SortOrder
    numero_orden?: SortOrder
    precio_Final?: SortOrder
    fehca?: SortOrder
  }

  export type compraSumOrderByAggregateInput = {
    id_compra?: SortOrder
    id_usuario?: SortOrder
    numero_orden?: SortOrder
    precio_Final?: SortOrder
  }

  export type comentarioCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<comentarioCreateWithoutUsuarioInput, comentarioUncheckedCreateWithoutUsuarioInput> | comentarioCreateWithoutUsuarioInput[] | comentarioUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: comentarioCreateOrConnectWithoutUsuarioInput | comentarioCreateOrConnectWithoutUsuarioInput[]
    createMany?: comentarioCreateManyUsuarioInputEnvelope
    connect?: comentarioWhereUniqueInput | comentarioWhereUniqueInput[]
  }

  export type lugarCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<lugarCreateWithoutUsuarioInput, lugarUncheckedCreateWithoutUsuarioInput> | lugarCreateWithoutUsuarioInput[] | lugarUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: lugarCreateOrConnectWithoutUsuarioInput | lugarCreateOrConnectWithoutUsuarioInput[]
    createMany?: lugarCreateManyUsuarioInputEnvelope
    connect?: lugarWhereUniqueInput | lugarWhereUniqueInput[]
  }

  export type ordenCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<ordenCreateWithoutUsuarioInput, ordenUncheckedCreateWithoutUsuarioInput> | ordenCreateWithoutUsuarioInput[] | ordenUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: ordenCreateOrConnectWithoutUsuarioInput | ordenCreateOrConnectWithoutUsuarioInput[]
    createMany?: ordenCreateManyUsuarioInputEnvelope
    connect?: ordenWhereUniqueInput | ordenWhereUniqueInput[]
  }

  export type compraCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<compraCreateWithoutUsuarioInput, compraUncheckedCreateWithoutUsuarioInput> | compraCreateWithoutUsuarioInput[] | compraUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: compraCreateOrConnectWithoutUsuarioInput | compraCreateOrConnectWithoutUsuarioInput[]
    createMany?: compraCreateManyUsuarioInputEnvelope
    connect?: compraWhereUniqueInput | compraWhereUniqueInput[]
  }

  export type comentarioUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<comentarioCreateWithoutUsuarioInput, comentarioUncheckedCreateWithoutUsuarioInput> | comentarioCreateWithoutUsuarioInput[] | comentarioUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: comentarioCreateOrConnectWithoutUsuarioInput | comentarioCreateOrConnectWithoutUsuarioInput[]
    createMany?: comentarioCreateManyUsuarioInputEnvelope
    connect?: comentarioWhereUniqueInput | comentarioWhereUniqueInput[]
  }

  export type lugarUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<lugarCreateWithoutUsuarioInput, lugarUncheckedCreateWithoutUsuarioInput> | lugarCreateWithoutUsuarioInput[] | lugarUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: lugarCreateOrConnectWithoutUsuarioInput | lugarCreateOrConnectWithoutUsuarioInput[]
    createMany?: lugarCreateManyUsuarioInputEnvelope
    connect?: lugarWhereUniqueInput | lugarWhereUniqueInput[]
  }

  export type ordenUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<ordenCreateWithoutUsuarioInput, ordenUncheckedCreateWithoutUsuarioInput> | ordenCreateWithoutUsuarioInput[] | ordenUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: ordenCreateOrConnectWithoutUsuarioInput | ordenCreateOrConnectWithoutUsuarioInput[]
    createMany?: ordenCreateManyUsuarioInputEnvelope
    connect?: ordenWhereUniqueInput | ordenWhereUniqueInput[]
  }

  export type compraUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<compraCreateWithoutUsuarioInput, compraUncheckedCreateWithoutUsuarioInput> | compraCreateWithoutUsuarioInput[] | compraUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: compraCreateOrConnectWithoutUsuarioInput | compraCreateOrConnectWithoutUsuarioInput[]
    createMany?: compraCreateManyUsuarioInputEnvelope
    connect?: compraWhereUniqueInput | compraWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type comentarioUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<comentarioCreateWithoutUsuarioInput, comentarioUncheckedCreateWithoutUsuarioInput> | comentarioCreateWithoutUsuarioInput[] | comentarioUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: comentarioCreateOrConnectWithoutUsuarioInput | comentarioCreateOrConnectWithoutUsuarioInput[]
    upsert?: comentarioUpsertWithWhereUniqueWithoutUsuarioInput | comentarioUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: comentarioCreateManyUsuarioInputEnvelope
    set?: comentarioWhereUniqueInput | comentarioWhereUniqueInput[]
    disconnect?: comentarioWhereUniqueInput | comentarioWhereUniqueInput[]
    delete?: comentarioWhereUniqueInput | comentarioWhereUniqueInput[]
    connect?: comentarioWhereUniqueInput | comentarioWhereUniqueInput[]
    update?: comentarioUpdateWithWhereUniqueWithoutUsuarioInput | comentarioUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: comentarioUpdateManyWithWhereWithoutUsuarioInput | comentarioUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: comentarioScalarWhereInput | comentarioScalarWhereInput[]
  }

  export type lugarUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<lugarCreateWithoutUsuarioInput, lugarUncheckedCreateWithoutUsuarioInput> | lugarCreateWithoutUsuarioInput[] | lugarUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: lugarCreateOrConnectWithoutUsuarioInput | lugarCreateOrConnectWithoutUsuarioInput[]
    upsert?: lugarUpsertWithWhereUniqueWithoutUsuarioInput | lugarUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: lugarCreateManyUsuarioInputEnvelope
    set?: lugarWhereUniqueInput | lugarWhereUniqueInput[]
    disconnect?: lugarWhereUniqueInput | lugarWhereUniqueInput[]
    delete?: lugarWhereUniqueInput | lugarWhereUniqueInput[]
    connect?: lugarWhereUniqueInput | lugarWhereUniqueInput[]
    update?: lugarUpdateWithWhereUniqueWithoutUsuarioInput | lugarUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: lugarUpdateManyWithWhereWithoutUsuarioInput | lugarUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: lugarScalarWhereInput | lugarScalarWhereInput[]
  }

  export type ordenUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<ordenCreateWithoutUsuarioInput, ordenUncheckedCreateWithoutUsuarioInput> | ordenCreateWithoutUsuarioInput[] | ordenUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: ordenCreateOrConnectWithoutUsuarioInput | ordenCreateOrConnectWithoutUsuarioInput[]
    upsert?: ordenUpsertWithWhereUniqueWithoutUsuarioInput | ordenUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: ordenCreateManyUsuarioInputEnvelope
    set?: ordenWhereUniqueInput | ordenWhereUniqueInput[]
    disconnect?: ordenWhereUniqueInput | ordenWhereUniqueInput[]
    delete?: ordenWhereUniqueInput | ordenWhereUniqueInput[]
    connect?: ordenWhereUniqueInput | ordenWhereUniqueInput[]
    update?: ordenUpdateWithWhereUniqueWithoutUsuarioInput | ordenUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: ordenUpdateManyWithWhereWithoutUsuarioInput | ordenUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: ordenScalarWhereInput | ordenScalarWhereInput[]
  }

  export type compraUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<compraCreateWithoutUsuarioInput, compraUncheckedCreateWithoutUsuarioInput> | compraCreateWithoutUsuarioInput[] | compraUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: compraCreateOrConnectWithoutUsuarioInput | compraCreateOrConnectWithoutUsuarioInput[]
    upsert?: compraUpsertWithWhereUniqueWithoutUsuarioInput | compraUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: compraCreateManyUsuarioInputEnvelope
    set?: compraWhereUniqueInput | compraWhereUniqueInput[]
    disconnect?: compraWhereUniqueInput | compraWhereUniqueInput[]
    delete?: compraWhereUniqueInput | compraWhereUniqueInput[]
    connect?: compraWhereUniqueInput | compraWhereUniqueInput[]
    update?: compraUpdateWithWhereUniqueWithoutUsuarioInput | compraUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: compraUpdateManyWithWhereWithoutUsuarioInput | compraUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: compraScalarWhereInput | compraScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type comentarioUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<comentarioCreateWithoutUsuarioInput, comentarioUncheckedCreateWithoutUsuarioInput> | comentarioCreateWithoutUsuarioInput[] | comentarioUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: comentarioCreateOrConnectWithoutUsuarioInput | comentarioCreateOrConnectWithoutUsuarioInput[]
    upsert?: comentarioUpsertWithWhereUniqueWithoutUsuarioInput | comentarioUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: comentarioCreateManyUsuarioInputEnvelope
    set?: comentarioWhereUniqueInput | comentarioWhereUniqueInput[]
    disconnect?: comentarioWhereUniqueInput | comentarioWhereUniqueInput[]
    delete?: comentarioWhereUniqueInput | comentarioWhereUniqueInput[]
    connect?: comentarioWhereUniqueInput | comentarioWhereUniqueInput[]
    update?: comentarioUpdateWithWhereUniqueWithoutUsuarioInput | comentarioUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: comentarioUpdateManyWithWhereWithoutUsuarioInput | comentarioUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: comentarioScalarWhereInput | comentarioScalarWhereInput[]
  }

  export type lugarUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<lugarCreateWithoutUsuarioInput, lugarUncheckedCreateWithoutUsuarioInput> | lugarCreateWithoutUsuarioInput[] | lugarUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: lugarCreateOrConnectWithoutUsuarioInput | lugarCreateOrConnectWithoutUsuarioInput[]
    upsert?: lugarUpsertWithWhereUniqueWithoutUsuarioInput | lugarUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: lugarCreateManyUsuarioInputEnvelope
    set?: lugarWhereUniqueInput | lugarWhereUniqueInput[]
    disconnect?: lugarWhereUniqueInput | lugarWhereUniqueInput[]
    delete?: lugarWhereUniqueInput | lugarWhereUniqueInput[]
    connect?: lugarWhereUniqueInput | lugarWhereUniqueInput[]
    update?: lugarUpdateWithWhereUniqueWithoutUsuarioInput | lugarUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: lugarUpdateManyWithWhereWithoutUsuarioInput | lugarUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: lugarScalarWhereInput | lugarScalarWhereInput[]
  }

  export type ordenUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<ordenCreateWithoutUsuarioInput, ordenUncheckedCreateWithoutUsuarioInput> | ordenCreateWithoutUsuarioInput[] | ordenUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: ordenCreateOrConnectWithoutUsuarioInput | ordenCreateOrConnectWithoutUsuarioInput[]
    upsert?: ordenUpsertWithWhereUniqueWithoutUsuarioInput | ordenUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: ordenCreateManyUsuarioInputEnvelope
    set?: ordenWhereUniqueInput | ordenWhereUniqueInput[]
    disconnect?: ordenWhereUniqueInput | ordenWhereUniqueInput[]
    delete?: ordenWhereUniqueInput | ordenWhereUniqueInput[]
    connect?: ordenWhereUniqueInput | ordenWhereUniqueInput[]
    update?: ordenUpdateWithWhereUniqueWithoutUsuarioInput | ordenUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: ordenUpdateManyWithWhereWithoutUsuarioInput | ordenUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: ordenScalarWhereInput | ordenScalarWhereInput[]
  }

  export type compraUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<compraCreateWithoutUsuarioInput, compraUncheckedCreateWithoutUsuarioInput> | compraCreateWithoutUsuarioInput[] | compraUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: compraCreateOrConnectWithoutUsuarioInput | compraCreateOrConnectWithoutUsuarioInput[]
    upsert?: compraUpsertWithWhereUniqueWithoutUsuarioInput | compraUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: compraCreateManyUsuarioInputEnvelope
    set?: compraWhereUniqueInput | compraWhereUniqueInput[]
    disconnect?: compraWhereUniqueInput | compraWhereUniqueInput[]
    delete?: compraWhereUniqueInput | compraWhereUniqueInput[]
    connect?: compraWhereUniqueInput | compraWhereUniqueInput[]
    update?: compraUpdateWithWhereUniqueWithoutUsuarioInput | compraUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: compraUpdateManyWithWhereWithoutUsuarioInput | compraUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: compraScalarWhereInput | compraScalarWhereInput[]
  }

  export type usuarioCreateNestedOneWithoutComentarioInput = {
    create?: XOR<usuarioCreateWithoutComentarioInput, usuarioUncheckedCreateWithoutComentarioInput>
    connectOrCreate?: usuarioCreateOrConnectWithoutComentarioInput
    connect?: usuarioWhereUniqueInput
  }

  export type publicacionCreateNestedManyWithoutComentarioInput = {
    create?: XOR<publicacionCreateWithoutComentarioInput, publicacionUncheckedCreateWithoutComentarioInput> | publicacionCreateWithoutComentarioInput[] | publicacionUncheckedCreateWithoutComentarioInput[]
    connectOrCreate?: publicacionCreateOrConnectWithoutComentarioInput | publicacionCreateOrConnectWithoutComentarioInput[]
    createMany?: publicacionCreateManyComentarioInputEnvelope
    connect?: publicacionWhereUniqueInput | publicacionWhereUniqueInput[]
  }

  export type publicacionUncheckedCreateNestedManyWithoutComentarioInput = {
    create?: XOR<publicacionCreateWithoutComentarioInput, publicacionUncheckedCreateWithoutComentarioInput> | publicacionCreateWithoutComentarioInput[] | publicacionUncheckedCreateWithoutComentarioInput[]
    connectOrCreate?: publicacionCreateOrConnectWithoutComentarioInput | publicacionCreateOrConnectWithoutComentarioInput[]
    createMany?: publicacionCreateManyComentarioInputEnvelope
    connect?: publicacionWhereUniqueInput | publicacionWhereUniqueInput[]
  }

  export type usuarioUpdateOneRequiredWithoutComentarioNestedInput = {
    create?: XOR<usuarioCreateWithoutComentarioInput, usuarioUncheckedCreateWithoutComentarioInput>
    connectOrCreate?: usuarioCreateOrConnectWithoutComentarioInput
    upsert?: usuarioUpsertWithoutComentarioInput
    connect?: usuarioWhereUniqueInput
    update?: XOR<XOR<usuarioUpdateToOneWithWhereWithoutComentarioInput, usuarioUpdateWithoutComentarioInput>, usuarioUncheckedUpdateWithoutComentarioInput>
  }

  export type publicacionUpdateManyWithoutComentarioNestedInput = {
    create?: XOR<publicacionCreateWithoutComentarioInput, publicacionUncheckedCreateWithoutComentarioInput> | publicacionCreateWithoutComentarioInput[] | publicacionUncheckedCreateWithoutComentarioInput[]
    connectOrCreate?: publicacionCreateOrConnectWithoutComentarioInput | publicacionCreateOrConnectWithoutComentarioInput[]
    upsert?: publicacionUpsertWithWhereUniqueWithoutComentarioInput | publicacionUpsertWithWhereUniqueWithoutComentarioInput[]
    createMany?: publicacionCreateManyComentarioInputEnvelope
    set?: publicacionWhereUniqueInput | publicacionWhereUniqueInput[]
    disconnect?: publicacionWhereUniqueInput | publicacionWhereUniqueInput[]
    delete?: publicacionWhereUniqueInput | publicacionWhereUniqueInput[]
    connect?: publicacionWhereUniqueInput | publicacionWhereUniqueInput[]
    update?: publicacionUpdateWithWhereUniqueWithoutComentarioInput | publicacionUpdateWithWhereUniqueWithoutComentarioInput[]
    updateMany?: publicacionUpdateManyWithWhereWithoutComentarioInput | publicacionUpdateManyWithWhereWithoutComentarioInput[]
    deleteMany?: publicacionScalarWhereInput | publicacionScalarWhereInput[]
  }

  export type publicacionUncheckedUpdateManyWithoutComentarioNestedInput = {
    create?: XOR<publicacionCreateWithoutComentarioInput, publicacionUncheckedCreateWithoutComentarioInput> | publicacionCreateWithoutComentarioInput[] | publicacionUncheckedCreateWithoutComentarioInput[]
    connectOrCreate?: publicacionCreateOrConnectWithoutComentarioInput | publicacionCreateOrConnectWithoutComentarioInput[]
    upsert?: publicacionUpsertWithWhereUniqueWithoutComentarioInput | publicacionUpsertWithWhereUniqueWithoutComentarioInput[]
    createMany?: publicacionCreateManyComentarioInputEnvelope
    set?: publicacionWhereUniqueInput | publicacionWhereUniqueInput[]
    disconnect?: publicacionWhereUniqueInput | publicacionWhereUniqueInput[]
    delete?: publicacionWhereUniqueInput | publicacionWhereUniqueInput[]
    connect?: publicacionWhereUniqueInput | publicacionWhereUniqueInput[]
    update?: publicacionUpdateWithWhereUniqueWithoutComentarioInput | publicacionUpdateWithWhereUniqueWithoutComentarioInput[]
    updateMany?: publicacionUpdateManyWithWhereWithoutComentarioInput | publicacionUpdateManyWithWhereWithoutComentarioInput[]
    deleteMany?: publicacionScalarWhereInput | publicacionScalarWhereInput[]
  }

  export type usuarioCreateNestedOneWithoutLugarInput = {
    create?: XOR<usuarioCreateWithoutLugarInput, usuarioUncheckedCreateWithoutLugarInput>
    connectOrCreate?: usuarioCreateOrConnectWithoutLugarInput
    connect?: usuarioWhereUniqueInput
  }

  export type usuarioUpdateOneRequiredWithoutLugarNestedInput = {
    create?: XOR<usuarioCreateWithoutLugarInput, usuarioUncheckedCreateWithoutLugarInput>
    connectOrCreate?: usuarioCreateOrConnectWithoutLugarInput
    upsert?: usuarioUpsertWithoutLugarInput
    connect?: usuarioWhereUniqueInput
    update?: XOR<XOR<usuarioUpdateToOneWithWhereWithoutLugarInput, usuarioUpdateWithoutLugarInput>, usuarioUncheckedUpdateWithoutLugarInput>
  }

  export type productoCreateNestedManyWithoutCategoriaInput = {
    create?: XOR<productoCreateWithoutCategoriaInput, productoUncheckedCreateWithoutCategoriaInput> | productoCreateWithoutCategoriaInput[] | productoUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: productoCreateOrConnectWithoutCategoriaInput | productoCreateOrConnectWithoutCategoriaInput[]
    createMany?: productoCreateManyCategoriaInputEnvelope
    connect?: productoWhereUniqueInput | productoWhereUniqueInput[]
  }

  export type productoUncheckedCreateNestedManyWithoutCategoriaInput = {
    create?: XOR<productoCreateWithoutCategoriaInput, productoUncheckedCreateWithoutCategoriaInput> | productoCreateWithoutCategoriaInput[] | productoUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: productoCreateOrConnectWithoutCategoriaInput | productoCreateOrConnectWithoutCategoriaInput[]
    createMany?: productoCreateManyCategoriaInputEnvelope
    connect?: productoWhereUniqueInput | productoWhereUniqueInput[]
  }

  export type productoUpdateManyWithoutCategoriaNestedInput = {
    create?: XOR<productoCreateWithoutCategoriaInput, productoUncheckedCreateWithoutCategoriaInput> | productoCreateWithoutCategoriaInput[] | productoUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: productoCreateOrConnectWithoutCategoriaInput | productoCreateOrConnectWithoutCategoriaInput[]
    upsert?: productoUpsertWithWhereUniqueWithoutCategoriaInput | productoUpsertWithWhereUniqueWithoutCategoriaInput[]
    createMany?: productoCreateManyCategoriaInputEnvelope
    set?: productoWhereUniqueInput | productoWhereUniqueInput[]
    disconnect?: productoWhereUniqueInput | productoWhereUniqueInput[]
    delete?: productoWhereUniqueInput | productoWhereUniqueInput[]
    connect?: productoWhereUniqueInput | productoWhereUniqueInput[]
    update?: productoUpdateWithWhereUniqueWithoutCategoriaInput | productoUpdateWithWhereUniqueWithoutCategoriaInput[]
    updateMany?: productoUpdateManyWithWhereWithoutCategoriaInput | productoUpdateManyWithWhereWithoutCategoriaInput[]
    deleteMany?: productoScalarWhereInput | productoScalarWhereInput[]
  }

  export type productoUncheckedUpdateManyWithoutCategoriaNestedInput = {
    create?: XOR<productoCreateWithoutCategoriaInput, productoUncheckedCreateWithoutCategoriaInput> | productoCreateWithoutCategoriaInput[] | productoUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: productoCreateOrConnectWithoutCategoriaInput | productoCreateOrConnectWithoutCategoriaInput[]
    upsert?: productoUpsertWithWhereUniqueWithoutCategoriaInput | productoUpsertWithWhereUniqueWithoutCategoriaInput[]
    createMany?: productoCreateManyCategoriaInputEnvelope
    set?: productoWhereUniqueInput | productoWhereUniqueInput[]
    disconnect?: productoWhereUniqueInput | productoWhereUniqueInput[]
    delete?: productoWhereUniqueInput | productoWhereUniqueInput[]
    connect?: productoWhereUniqueInput | productoWhereUniqueInput[]
    update?: productoUpdateWithWhereUniqueWithoutCategoriaInput | productoUpdateWithWhereUniqueWithoutCategoriaInput[]
    updateMany?: productoUpdateManyWithWhereWithoutCategoriaInput | productoUpdateManyWithWhereWithoutCategoriaInput[]
    deleteMany?: productoScalarWhereInput | productoScalarWhereInput[]
  }

  export type categoriaCreateNestedOneWithoutProductoInput = {
    create?: XOR<categoriaCreateWithoutProductoInput, categoriaUncheckedCreateWithoutProductoInput>
    connectOrCreate?: categoriaCreateOrConnectWithoutProductoInput
    connect?: categoriaWhereUniqueInput
  }

  export type ordenCreateNestedManyWithoutProductoInput = {
    create?: XOR<ordenCreateWithoutProductoInput, ordenUncheckedCreateWithoutProductoInput> | ordenCreateWithoutProductoInput[] | ordenUncheckedCreateWithoutProductoInput[]
    connectOrCreate?: ordenCreateOrConnectWithoutProductoInput | ordenCreateOrConnectWithoutProductoInput[]
    createMany?: ordenCreateManyProductoInputEnvelope
    connect?: ordenWhereUniqueInput | ordenWhereUniqueInput[]
  }

  export type ordenUncheckedCreateNestedManyWithoutProductoInput = {
    create?: XOR<ordenCreateWithoutProductoInput, ordenUncheckedCreateWithoutProductoInput> | ordenCreateWithoutProductoInput[] | ordenUncheckedCreateWithoutProductoInput[]
    connectOrCreate?: ordenCreateOrConnectWithoutProductoInput | ordenCreateOrConnectWithoutProductoInput[]
    createMany?: ordenCreateManyProductoInputEnvelope
    connect?: ordenWhereUniqueInput | ordenWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type categoriaUpdateOneRequiredWithoutProductoNestedInput = {
    create?: XOR<categoriaCreateWithoutProductoInput, categoriaUncheckedCreateWithoutProductoInput>
    connectOrCreate?: categoriaCreateOrConnectWithoutProductoInput
    upsert?: categoriaUpsertWithoutProductoInput
    connect?: categoriaWhereUniqueInput
    update?: XOR<XOR<categoriaUpdateToOneWithWhereWithoutProductoInput, categoriaUpdateWithoutProductoInput>, categoriaUncheckedUpdateWithoutProductoInput>
  }

  export type ordenUpdateManyWithoutProductoNestedInput = {
    create?: XOR<ordenCreateWithoutProductoInput, ordenUncheckedCreateWithoutProductoInput> | ordenCreateWithoutProductoInput[] | ordenUncheckedCreateWithoutProductoInput[]
    connectOrCreate?: ordenCreateOrConnectWithoutProductoInput | ordenCreateOrConnectWithoutProductoInput[]
    upsert?: ordenUpsertWithWhereUniqueWithoutProductoInput | ordenUpsertWithWhereUniqueWithoutProductoInput[]
    createMany?: ordenCreateManyProductoInputEnvelope
    set?: ordenWhereUniqueInput | ordenWhereUniqueInput[]
    disconnect?: ordenWhereUniqueInput | ordenWhereUniqueInput[]
    delete?: ordenWhereUniqueInput | ordenWhereUniqueInput[]
    connect?: ordenWhereUniqueInput | ordenWhereUniqueInput[]
    update?: ordenUpdateWithWhereUniqueWithoutProductoInput | ordenUpdateWithWhereUniqueWithoutProductoInput[]
    updateMany?: ordenUpdateManyWithWhereWithoutProductoInput | ordenUpdateManyWithWhereWithoutProductoInput[]
    deleteMany?: ordenScalarWhereInput | ordenScalarWhereInput[]
  }

  export type ordenUncheckedUpdateManyWithoutProductoNestedInput = {
    create?: XOR<ordenCreateWithoutProductoInput, ordenUncheckedCreateWithoutProductoInput> | ordenCreateWithoutProductoInput[] | ordenUncheckedCreateWithoutProductoInput[]
    connectOrCreate?: ordenCreateOrConnectWithoutProductoInput | ordenCreateOrConnectWithoutProductoInput[]
    upsert?: ordenUpsertWithWhereUniqueWithoutProductoInput | ordenUpsertWithWhereUniqueWithoutProductoInput[]
    createMany?: ordenCreateManyProductoInputEnvelope
    set?: ordenWhereUniqueInput | ordenWhereUniqueInput[]
    disconnect?: ordenWhereUniqueInput | ordenWhereUniqueInput[]
    delete?: ordenWhereUniqueInput | ordenWhereUniqueInput[]
    connect?: ordenWhereUniqueInput | ordenWhereUniqueInput[]
    update?: ordenUpdateWithWhereUniqueWithoutProductoInput | ordenUpdateWithWhereUniqueWithoutProductoInput[]
    updateMany?: ordenUpdateManyWithWhereWithoutProductoInput | ordenUpdateManyWithWhereWithoutProductoInput[]
    deleteMany?: ordenScalarWhereInput | ordenScalarWhereInput[]
  }

  export type comentarioCreateNestedOneWithoutPublicacionInput = {
    create?: XOR<comentarioCreateWithoutPublicacionInput, comentarioUncheckedCreateWithoutPublicacionInput>
    connectOrCreate?: comentarioCreateOrConnectWithoutPublicacionInput
    connect?: comentarioWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type comentarioUpdateOneRequiredWithoutPublicacionNestedInput = {
    create?: XOR<comentarioCreateWithoutPublicacionInput, comentarioUncheckedCreateWithoutPublicacionInput>
    connectOrCreate?: comentarioCreateOrConnectWithoutPublicacionInput
    upsert?: comentarioUpsertWithoutPublicacionInput
    connect?: comentarioWhereUniqueInput
    update?: XOR<XOR<comentarioUpdateToOneWithWhereWithoutPublicacionInput, comentarioUpdateWithoutPublicacionInput>, comentarioUncheckedUpdateWithoutPublicacionInput>
  }

  export type usuarioCreateNestedOneWithoutOrdenInput = {
    create?: XOR<usuarioCreateWithoutOrdenInput, usuarioUncheckedCreateWithoutOrdenInput>
    connectOrCreate?: usuarioCreateOrConnectWithoutOrdenInput
    connect?: usuarioWhereUniqueInput
  }

  export type productoCreateNestedOneWithoutOrdenInput = {
    create?: XOR<productoCreateWithoutOrdenInput, productoUncheckedCreateWithoutOrdenInput>
    connectOrCreate?: productoCreateOrConnectWithoutOrdenInput
    connect?: productoWhereUniqueInput
  }

  export type usuarioUpdateOneRequiredWithoutOrdenNestedInput = {
    create?: XOR<usuarioCreateWithoutOrdenInput, usuarioUncheckedCreateWithoutOrdenInput>
    connectOrCreate?: usuarioCreateOrConnectWithoutOrdenInput
    upsert?: usuarioUpsertWithoutOrdenInput
    connect?: usuarioWhereUniqueInput
    update?: XOR<XOR<usuarioUpdateToOneWithWhereWithoutOrdenInput, usuarioUpdateWithoutOrdenInput>, usuarioUncheckedUpdateWithoutOrdenInput>
  }

  export type productoUpdateOneRequiredWithoutOrdenNestedInput = {
    create?: XOR<productoCreateWithoutOrdenInput, productoUncheckedCreateWithoutOrdenInput>
    connectOrCreate?: productoCreateOrConnectWithoutOrdenInput
    upsert?: productoUpsertWithoutOrdenInput
    connect?: productoWhereUniqueInput
    update?: XOR<XOR<productoUpdateToOneWithWhereWithoutOrdenInput, productoUpdateWithoutOrdenInput>, productoUncheckedUpdateWithoutOrdenInput>
  }

  export type usuarioCreateNestedOneWithoutCompraInput = {
    create?: XOR<usuarioCreateWithoutCompraInput, usuarioUncheckedCreateWithoutCompraInput>
    connectOrCreate?: usuarioCreateOrConnectWithoutCompraInput
    connect?: usuarioWhereUniqueInput
  }

  export type usuarioUpdateOneRequiredWithoutCompraNestedInput = {
    create?: XOR<usuarioCreateWithoutCompraInput, usuarioUncheckedCreateWithoutCompraInput>
    connectOrCreate?: usuarioCreateOrConnectWithoutCompraInput
    upsert?: usuarioUpsertWithoutCompraInput
    connect?: usuarioWhereUniqueInput
    update?: XOR<XOR<usuarioUpdateToOneWithWhereWithoutCompraInput, usuarioUpdateWithoutCompraInput>, usuarioUncheckedUpdateWithoutCompraInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type comentarioCreateWithoutUsuarioInput = {
    comentario: string
    publicacion?: publicacionCreateNestedManyWithoutComentarioInput
  }

  export type comentarioUncheckedCreateWithoutUsuarioInput = {
    id_comentario?: number
    comentario: string
    publicacion?: publicacionUncheckedCreateNestedManyWithoutComentarioInput
  }

  export type comentarioCreateOrConnectWithoutUsuarioInput = {
    where: comentarioWhereUniqueInput
    create: XOR<comentarioCreateWithoutUsuarioInput, comentarioUncheckedCreateWithoutUsuarioInput>
  }

  export type comentarioCreateManyUsuarioInputEnvelope = {
    data: comentarioCreateManyUsuarioInput | comentarioCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type lugarCreateWithoutUsuarioInput = {
    pais: string
    provincia: string
  }

  export type lugarUncheckedCreateWithoutUsuarioInput = {
    id_lugar?: number
    pais: string
    provincia: string
  }

  export type lugarCreateOrConnectWithoutUsuarioInput = {
    where: lugarWhereUniqueInput
    create: XOR<lugarCreateWithoutUsuarioInput, lugarUncheckedCreateWithoutUsuarioInput>
  }

  export type lugarCreateManyUsuarioInputEnvelope = {
    data: lugarCreateManyUsuarioInput | lugarCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type ordenCreateWithoutUsuarioInput = {
    numero_orden: number
    stock: number
    precio: number
    producto: productoCreateNestedOneWithoutOrdenInput
  }

  export type ordenUncheckedCreateWithoutUsuarioInput = {
    id_item?: number
    numero_orden: number
    id_producto: number
    stock: number
    precio: number
  }

  export type ordenCreateOrConnectWithoutUsuarioInput = {
    where: ordenWhereUniqueInput
    create: XOR<ordenCreateWithoutUsuarioInput, ordenUncheckedCreateWithoutUsuarioInput>
  }

  export type ordenCreateManyUsuarioInputEnvelope = {
    data: ordenCreateManyUsuarioInput | ordenCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type compraCreateWithoutUsuarioInput = {
    numero_orden: number
    precio_Final: number
    fehca: string
  }

  export type compraUncheckedCreateWithoutUsuarioInput = {
    id_compra?: number
    numero_orden: number
    precio_Final: number
    fehca: string
  }

  export type compraCreateOrConnectWithoutUsuarioInput = {
    where: compraWhereUniqueInput
    create: XOR<compraCreateWithoutUsuarioInput, compraUncheckedCreateWithoutUsuarioInput>
  }

  export type compraCreateManyUsuarioInputEnvelope = {
    data: compraCreateManyUsuarioInput | compraCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type comentarioUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: comentarioWhereUniqueInput
    update: XOR<comentarioUpdateWithoutUsuarioInput, comentarioUncheckedUpdateWithoutUsuarioInput>
    create: XOR<comentarioCreateWithoutUsuarioInput, comentarioUncheckedCreateWithoutUsuarioInput>
  }

  export type comentarioUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: comentarioWhereUniqueInput
    data: XOR<comentarioUpdateWithoutUsuarioInput, comentarioUncheckedUpdateWithoutUsuarioInput>
  }

  export type comentarioUpdateManyWithWhereWithoutUsuarioInput = {
    where: comentarioScalarWhereInput
    data: XOR<comentarioUpdateManyMutationInput, comentarioUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type comentarioScalarWhereInput = {
    AND?: comentarioScalarWhereInput | comentarioScalarWhereInput[]
    OR?: comentarioScalarWhereInput[]
    NOT?: comentarioScalarWhereInput | comentarioScalarWhereInput[]
    id_comentario?: IntFilter<"comentario"> | number
    id_usuario?: IntFilter<"comentario"> | number
    comentario?: StringFilter<"comentario"> | string
  }

  export type lugarUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: lugarWhereUniqueInput
    update: XOR<lugarUpdateWithoutUsuarioInput, lugarUncheckedUpdateWithoutUsuarioInput>
    create: XOR<lugarCreateWithoutUsuarioInput, lugarUncheckedCreateWithoutUsuarioInput>
  }

  export type lugarUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: lugarWhereUniqueInput
    data: XOR<lugarUpdateWithoutUsuarioInput, lugarUncheckedUpdateWithoutUsuarioInput>
  }

  export type lugarUpdateManyWithWhereWithoutUsuarioInput = {
    where: lugarScalarWhereInput
    data: XOR<lugarUpdateManyMutationInput, lugarUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type lugarScalarWhereInput = {
    AND?: lugarScalarWhereInput | lugarScalarWhereInput[]
    OR?: lugarScalarWhereInput[]
    NOT?: lugarScalarWhereInput | lugarScalarWhereInput[]
    id_lugar?: IntFilter<"lugar"> | number
    id_usuario?: IntFilter<"lugar"> | number
    pais?: StringFilter<"lugar"> | string
    provincia?: StringFilter<"lugar"> | string
  }

  export type ordenUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: ordenWhereUniqueInput
    update: XOR<ordenUpdateWithoutUsuarioInput, ordenUncheckedUpdateWithoutUsuarioInput>
    create: XOR<ordenCreateWithoutUsuarioInput, ordenUncheckedCreateWithoutUsuarioInput>
  }

  export type ordenUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: ordenWhereUniqueInput
    data: XOR<ordenUpdateWithoutUsuarioInput, ordenUncheckedUpdateWithoutUsuarioInput>
  }

  export type ordenUpdateManyWithWhereWithoutUsuarioInput = {
    where: ordenScalarWhereInput
    data: XOR<ordenUpdateManyMutationInput, ordenUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type ordenScalarWhereInput = {
    AND?: ordenScalarWhereInput | ordenScalarWhereInput[]
    OR?: ordenScalarWhereInput[]
    NOT?: ordenScalarWhereInput | ordenScalarWhereInput[]
    id_item?: IntFilter<"orden"> | number
    numero_orden?: IntFilter<"orden"> | number
    id_usuario?: IntFilter<"orden"> | number
    id_producto?: IntFilter<"orden"> | number
    stock?: IntFilter<"orden"> | number
    precio?: FloatFilter<"orden"> | number
  }

  export type compraUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: compraWhereUniqueInput
    update: XOR<compraUpdateWithoutUsuarioInput, compraUncheckedUpdateWithoutUsuarioInput>
    create: XOR<compraCreateWithoutUsuarioInput, compraUncheckedCreateWithoutUsuarioInput>
  }

  export type compraUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: compraWhereUniqueInput
    data: XOR<compraUpdateWithoutUsuarioInput, compraUncheckedUpdateWithoutUsuarioInput>
  }

  export type compraUpdateManyWithWhereWithoutUsuarioInput = {
    where: compraScalarWhereInput
    data: XOR<compraUpdateManyMutationInput, compraUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type compraScalarWhereInput = {
    AND?: compraScalarWhereInput | compraScalarWhereInput[]
    OR?: compraScalarWhereInput[]
    NOT?: compraScalarWhereInput | compraScalarWhereInput[]
    id_compra?: IntFilter<"compra"> | number
    id_usuario?: IntFilter<"compra"> | number
    numero_orden?: IntFilter<"compra"> | number
    precio_Final?: FloatFilter<"compra"> | number
    fehca?: StringFilter<"compra"> | string
  }

  export type usuarioCreateWithoutComentarioInput = {
    nombre: string
    apellido: string
    email: string
    telefono: string
    edad: string
    foto?: string
    lugar?: lugarCreateNestedManyWithoutUsuarioInput
    orden?: ordenCreateNestedManyWithoutUsuarioInput
    compra?: compraCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioUncheckedCreateWithoutComentarioInput = {
    id_usuario?: number
    nombre: string
    apellido: string
    email: string
    telefono: string
    edad: string
    foto?: string
    lugar?: lugarUncheckedCreateNestedManyWithoutUsuarioInput
    orden?: ordenUncheckedCreateNestedManyWithoutUsuarioInput
    compra?: compraUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioCreateOrConnectWithoutComentarioInput = {
    where: usuarioWhereUniqueInput
    create: XOR<usuarioCreateWithoutComentarioInput, usuarioUncheckedCreateWithoutComentarioInput>
  }

  export type publicacionCreateWithoutComentarioInput = {
    titulo: string
    descripcion?: string | null
    foto?: string | null
  }

  export type publicacionUncheckedCreateWithoutComentarioInput = {
    id_publicacion?: number
    titulo: string
    descripcion?: string | null
    foto?: string | null
  }

  export type publicacionCreateOrConnectWithoutComentarioInput = {
    where: publicacionWhereUniqueInput
    create: XOR<publicacionCreateWithoutComentarioInput, publicacionUncheckedCreateWithoutComentarioInput>
  }

  export type publicacionCreateManyComentarioInputEnvelope = {
    data: publicacionCreateManyComentarioInput | publicacionCreateManyComentarioInput[]
    skipDuplicates?: boolean
  }

  export type usuarioUpsertWithoutComentarioInput = {
    update: XOR<usuarioUpdateWithoutComentarioInput, usuarioUncheckedUpdateWithoutComentarioInput>
    create: XOR<usuarioCreateWithoutComentarioInput, usuarioUncheckedCreateWithoutComentarioInput>
    where?: usuarioWhereInput
  }

  export type usuarioUpdateToOneWithWhereWithoutComentarioInput = {
    where?: usuarioWhereInput
    data: XOR<usuarioUpdateWithoutComentarioInput, usuarioUncheckedUpdateWithoutComentarioInput>
  }

  export type usuarioUpdateWithoutComentarioInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    edad?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    lugar?: lugarUpdateManyWithoutUsuarioNestedInput
    orden?: ordenUpdateManyWithoutUsuarioNestedInput
    compra?: compraUpdateManyWithoutUsuarioNestedInput
  }

  export type usuarioUncheckedUpdateWithoutComentarioInput = {
    id_usuario?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    edad?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    lugar?: lugarUncheckedUpdateManyWithoutUsuarioNestedInput
    orden?: ordenUncheckedUpdateManyWithoutUsuarioNestedInput
    compra?: compraUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type publicacionUpsertWithWhereUniqueWithoutComentarioInput = {
    where: publicacionWhereUniqueInput
    update: XOR<publicacionUpdateWithoutComentarioInput, publicacionUncheckedUpdateWithoutComentarioInput>
    create: XOR<publicacionCreateWithoutComentarioInput, publicacionUncheckedCreateWithoutComentarioInput>
  }

  export type publicacionUpdateWithWhereUniqueWithoutComentarioInput = {
    where: publicacionWhereUniqueInput
    data: XOR<publicacionUpdateWithoutComentarioInput, publicacionUncheckedUpdateWithoutComentarioInput>
  }

  export type publicacionUpdateManyWithWhereWithoutComentarioInput = {
    where: publicacionScalarWhereInput
    data: XOR<publicacionUpdateManyMutationInput, publicacionUncheckedUpdateManyWithoutComentarioInput>
  }

  export type publicacionScalarWhereInput = {
    AND?: publicacionScalarWhereInput | publicacionScalarWhereInput[]
    OR?: publicacionScalarWhereInput[]
    NOT?: publicacionScalarWhereInput | publicacionScalarWhereInput[]
    id_publicacion?: IntFilter<"publicacion"> | number
    id_comentario?: IntFilter<"publicacion"> | number
    titulo?: StringFilter<"publicacion"> | string
    descripcion?: StringNullableFilter<"publicacion"> | string | null
    foto?: StringNullableFilter<"publicacion"> | string | null
  }

  export type usuarioCreateWithoutLugarInput = {
    nombre: string
    apellido: string
    email: string
    telefono: string
    edad: string
    foto?: string
    comentario?: comentarioCreateNestedManyWithoutUsuarioInput
    orden?: ordenCreateNestedManyWithoutUsuarioInput
    compra?: compraCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioUncheckedCreateWithoutLugarInput = {
    id_usuario?: number
    nombre: string
    apellido: string
    email: string
    telefono: string
    edad: string
    foto?: string
    comentario?: comentarioUncheckedCreateNestedManyWithoutUsuarioInput
    orden?: ordenUncheckedCreateNestedManyWithoutUsuarioInput
    compra?: compraUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioCreateOrConnectWithoutLugarInput = {
    where: usuarioWhereUniqueInput
    create: XOR<usuarioCreateWithoutLugarInput, usuarioUncheckedCreateWithoutLugarInput>
  }

  export type usuarioUpsertWithoutLugarInput = {
    update: XOR<usuarioUpdateWithoutLugarInput, usuarioUncheckedUpdateWithoutLugarInput>
    create: XOR<usuarioCreateWithoutLugarInput, usuarioUncheckedCreateWithoutLugarInput>
    where?: usuarioWhereInput
  }

  export type usuarioUpdateToOneWithWhereWithoutLugarInput = {
    where?: usuarioWhereInput
    data: XOR<usuarioUpdateWithoutLugarInput, usuarioUncheckedUpdateWithoutLugarInput>
  }

  export type usuarioUpdateWithoutLugarInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    edad?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    comentario?: comentarioUpdateManyWithoutUsuarioNestedInput
    orden?: ordenUpdateManyWithoutUsuarioNestedInput
    compra?: compraUpdateManyWithoutUsuarioNestedInput
  }

  export type usuarioUncheckedUpdateWithoutLugarInput = {
    id_usuario?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    edad?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    comentario?: comentarioUncheckedUpdateManyWithoutUsuarioNestedInput
    orden?: ordenUncheckedUpdateManyWithoutUsuarioNestedInput
    compra?: compraUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type productoCreateWithoutCategoriaInput = {
    marca: string
    descripcion: string
    precio: number
    stock: number
    foto?: string
    orden?: ordenCreateNestedManyWithoutProductoInput
  }

  export type productoUncheckedCreateWithoutCategoriaInput = {
    id_producto?: number
    marca: string
    descripcion: string
    precio: number
    stock: number
    foto?: string
    orden?: ordenUncheckedCreateNestedManyWithoutProductoInput
  }

  export type productoCreateOrConnectWithoutCategoriaInput = {
    where: productoWhereUniqueInput
    create: XOR<productoCreateWithoutCategoriaInput, productoUncheckedCreateWithoutCategoriaInput>
  }

  export type productoCreateManyCategoriaInputEnvelope = {
    data: productoCreateManyCategoriaInput | productoCreateManyCategoriaInput[]
    skipDuplicates?: boolean
  }

  export type productoUpsertWithWhereUniqueWithoutCategoriaInput = {
    where: productoWhereUniqueInput
    update: XOR<productoUpdateWithoutCategoriaInput, productoUncheckedUpdateWithoutCategoriaInput>
    create: XOR<productoCreateWithoutCategoriaInput, productoUncheckedCreateWithoutCategoriaInput>
  }

  export type productoUpdateWithWhereUniqueWithoutCategoriaInput = {
    where: productoWhereUniqueInput
    data: XOR<productoUpdateWithoutCategoriaInput, productoUncheckedUpdateWithoutCategoriaInput>
  }

  export type productoUpdateManyWithWhereWithoutCategoriaInput = {
    where: productoScalarWhereInput
    data: XOR<productoUpdateManyMutationInput, productoUncheckedUpdateManyWithoutCategoriaInput>
  }

  export type productoScalarWhereInput = {
    AND?: productoScalarWhereInput | productoScalarWhereInput[]
    OR?: productoScalarWhereInput[]
    NOT?: productoScalarWhereInput | productoScalarWhereInput[]
    id_producto?: IntFilter<"producto"> | number
    id_categoria?: IntFilter<"producto"> | number
    marca?: StringFilter<"producto"> | string
    descripcion?: StringFilter<"producto"> | string
    precio?: FloatFilter<"producto"> | number
    stock?: IntFilter<"producto"> | number
    foto?: StringFilter<"producto"> | string
  }

  export type categoriaCreateWithoutProductoInput = {
    categoria: string
  }

  export type categoriaUncheckedCreateWithoutProductoInput = {
    id_categoria?: number
    categoria: string
  }

  export type categoriaCreateOrConnectWithoutProductoInput = {
    where: categoriaWhereUniqueInput
    create: XOR<categoriaCreateWithoutProductoInput, categoriaUncheckedCreateWithoutProductoInput>
  }

  export type ordenCreateWithoutProductoInput = {
    numero_orden: number
    stock: number
    precio: number
    usuario: usuarioCreateNestedOneWithoutOrdenInput
  }

  export type ordenUncheckedCreateWithoutProductoInput = {
    id_item?: number
    numero_orden: number
    id_usuario: number
    stock: number
    precio: number
  }

  export type ordenCreateOrConnectWithoutProductoInput = {
    where: ordenWhereUniqueInput
    create: XOR<ordenCreateWithoutProductoInput, ordenUncheckedCreateWithoutProductoInput>
  }

  export type ordenCreateManyProductoInputEnvelope = {
    data: ordenCreateManyProductoInput | ordenCreateManyProductoInput[]
    skipDuplicates?: boolean
  }

  export type categoriaUpsertWithoutProductoInput = {
    update: XOR<categoriaUpdateWithoutProductoInput, categoriaUncheckedUpdateWithoutProductoInput>
    create: XOR<categoriaCreateWithoutProductoInput, categoriaUncheckedCreateWithoutProductoInput>
    where?: categoriaWhereInput
  }

  export type categoriaUpdateToOneWithWhereWithoutProductoInput = {
    where?: categoriaWhereInput
    data: XOR<categoriaUpdateWithoutProductoInput, categoriaUncheckedUpdateWithoutProductoInput>
  }

  export type categoriaUpdateWithoutProductoInput = {
    categoria?: StringFieldUpdateOperationsInput | string
  }

  export type categoriaUncheckedUpdateWithoutProductoInput = {
    id_categoria?: IntFieldUpdateOperationsInput | number
    categoria?: StringFieldUpdateOperationsInput | string
  }

  export type ordenUpsertWithWhereUniqueWithoutProductoInput = {
    where: ordenWhereUniqueInput
    update: XOR<ordenUpdateWithoutProductoInput, ordenUncheckedUpdateWithoutProductoInput>
    create: XOR<ordenCreateWithoutProductoInput, ordenUncheckedCreateWithoutProductoInput>
  }

  export type ordenUpdateWithWhereUniqueWithoutProductoInput = {
    where: ordenWhereUniqueInput
    data: XOR<ordenUpdateWithoutProductoInput, ordenUncheckedUpdateWithoutProductoInput>
  }

  export type ordenUpdateManyWithWhereWithoutProductoInput = {
    where: ordenScalarWhereInput
    data: XOR<ordenUpdateManyMutationInput, ordenUncheckedUpdateManyWithoutProductoInput>
  }

  export type comentarioCreateWithoutPublicacionInput = {
    comentario: string
    usuario: usuarioCreateNestedOneWithoutComentarioInput
  }

  export type comentarioUncheckedCreateWithoutPublicacionInput = {
    id_comentario?: number
    id_usuario: number
    comentario: string
  }

  export type comentarioCreateOrConnectWithoutPublicacionInput = {
    where: comentarioWhereUniqueInput
    create: XOR<comentarioCreateWithoutPublicacionInput, comentarioUncheckedCreateWithoutPublicacionInput>
  }

  export type comentarioUpsertWithoutPublicacionInput = {
    update: XOR<comentarioUpdateWithoutPublicacionInput, comentarioUncheckedUpdateWithoutPublicacionInput>
    create: XOR<comentarioCreateWithoutPublicacionInput, comentarioUncheckedCreateWithoutPublicacionInput>
    where?: comentarioWhereInput
  }

  export type comentarioUpdateToOneWithWhereWithoutPublicacionInput = {
    where?: comentarioWhereInput
    data: XOR<comentarioUpdateWithoutPublicacionInput, comentarioUncheckedUpdateWithoutPublicacionInput>
  }

  export type comentarioUpdateWithoutPublicacionInput = {
    comentario?: StringFieldUpdateOperationsInput | string
    usuario?: usuarioUpdateOneRequiredWithoutComentarioNestedInput
  }

  export type comentarioUncheckedUpdateWithoutPublicacionInput = {
    id_comentario?: IntFieldUpdateOperationsInput | number
    id_usuario?: IntFieldUpdateOperationsInput | number
    comentario?: StringFieldUpdateOperationsInput | string
  }

  export type usuarioCreateWithoutOrdenInput = {
    nombre: string
    apellido: string
    email: string
    telefono: string
    edad: string
    foto?: string
    comentario?: comentarioCreateNestedManyWithoutUsuarioInput
    lugar?: lugarCreateNestedManyWithoutUsuarioInput
    compra?: compraCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioUncheckedCreateWithoutOrdenInput = {
    id_usuario?: number
    nombre: string
    apellido: string
    email: string
    telefono: string
    edad: string
    foto?: string
    comentario?: comentarioUncheckedCreateNestedManyWithoutUsuarioInput
    lugar?: lugarUncheckedCreateNestedManyWithoutUsuarioInput
    compra?: compraUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioCreateOrConnectWithoutOrdenInput = {
    where: usuarioWhereUniqueInput
    create: XOR<usuarioCreateWithoutOrdenInput, usuarioUncheckedCreateWithoutOrdenInput>
  }

  export type productoCreateWithoutOrdenInput = {
    marca: string
    descripcion: string
    precio: number
    stock: number
    foto?: string
    categoria: categoriaCreateNestedOneWithoutProductoInput
  }

  export type productoUncheckedCreateWithoutOrdenInput = {
    id_producto?: number
    id_categoria: number
    marca: string
    descripcion: string
    precio: number
    stock: number
    foto?: string
  }

  export type productoCreateOrConnectWithoutOrdenInput = {
    where: productoWhereUniqueInput
    create: XOR<productoCreateWithoutOrdenInput, productoUncheckedCreateWithoutOrdenInput>
  }

  export type usuarioUpsertWithoutOrdenInput = {
    update: XOR<usuarioUpdateWithoutOrdenInput, usuarioUncheckedUpdateWithoutOrdenInput>
    create: XOR<usuarioCreateWithoutOrdenInput, usuarioUncheckedCreateWithoutOrdenInput>
    where?: usuarioWhereInput
  }

  export type usuarioUpdateToOneWithWhereWithoutOrdenInput = {
    where?: usuarioWhereInput
    data: XOR<usuarioUpdateWithoutOrdenInput, usuarioUncheckedUpdateWithoutOrdenInput>
  }

  export type usuarioUpdateWithoutOrdenInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    edad?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    comentario?: comentarioUpdateManyWithoutUsuarioNestedInput
    lugar?: lugarUpdateManyWithoutUsuarioNestedInput
    compra?: compraUpdateManyWithoutUsuarioNestedInput
  }

  export type usuarioUncheckedUpdateWithoutOrdenInput = {
    id_usuario?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    edad?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    comentario?: comentarioUncheckedUpdateManyWithoutUsuarioNestedInput
    lugar?: lugarUncheckedUpdateManyWithoutUsuarioNestedInput
    compra?: compraUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type productoUpsertWithoutOrdenInput = {
    update: XOR<productoUpdateWithoutOrdenInput, productoUncheckedUpdateWithoutOrdenInput>
    create: XOR<productoCreateWithoutOrdenInput, productoUncheckedCreateWithoutOrdenInput>
    where?: productoWhereInput
  }

  export type productoUpdateToOneWithWhereWithoutOrdenInput = {
    where?: productoWhereInput
    data: XOR<productoUpdateWithoutOrdenInput, productoUncheckedUpdateWithoutOrdenInput>
  }

  export type productoUpdateWithoutOrdenInput = {
    marca?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    foto?: StringFieldUpdateOperationsInput | string
    categoria?: categoriaUpdateOneRequiredWithoutProductoNestedInput
  }

  export type productoUncheckedUpdateWithoutOrdenInput = {
    id_producto?: IntFieldUpdateOperationsInput | number
    id_categoria?: IntFieldUpdateOperationsInput | number
    marca?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    foto?: StringFieldUpdateOperationsInput | string
  }

  export type usuarioCreateWithoutCompraInput = {
    nombre: string
    apellido: string
    email: string
    telefono: string
    edad: string
    foto?: string
    comentario?: comentarioCreateNestedManyWithoutUsuarioInput
    lugar?: lugarCreateNestedManyWithoutUsuarioInput
    orden?: ordenCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioUncheckedCreateWithoutCompraInput = {
    id_usuario?: number
    nombre: string
    apellido: string
    email: string
    telefono: string
    edad: string
    foto?: string
    comentario?: comentarioUncheckedCreateNestedManyWithoutUsuarioInput
    lugar?: lugarUncheckedCreateNestedManyWithoutUsuarioInput
    orden?: ordenUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioCreateOrConnectWithoutCompraInput = {
    where: usuarioWhereUniqueInput
    create: XOR<usuarioCreateWithoutCompraInput, usuarioUncheckedCreateWithoutCompraInput>
  }

  export type usuarioUpsertWithoutCompraInput = {
    update: XOR<usuarioUpdateWithoutCompraInput, usuarioUncheckedUpdateWithoutCompraInput>
    create: XOR<usuarioCreateWithoutCompraInput, usuarioUncheckedCreateWithoutCompraInput>
    where?: usuarioWhereInput
  }

  export type usuarioUpdateToOneWithWhereWithoutCompraInput = {
    where?: usuarioWhereInput
    data: XOR<usuarioUpdateWithoutCompraInput, usuarioUncheckedUpdateWithoutCompraInput>
  }

  export type usuarioUpdateWithoutCompraInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    edad?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    comentario?: comentarioUpdateManyWithoutUsuarioNestedInput
    lugar?: lugarUpdateManyWithoutUsuarioNestedInput
    orden?: ordenUpdateManyWithoutUsuarioNestedInput
  }

  export type usuarioUncheckedUpdateWithoutCompraInput = {
    id_usuario?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    edad?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    comentario?: comentarioUncheckedUpdateManyWithoutUsuarioNestedInput
    lugar?: lugarUncheckedUpdateManyWithoutUsuarioNestedInput
    orden?: ordenUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type comentarioCreateManyUsuarioInput = {
    id_comentario?: number
    comentario: string
  }

  export type lugarCreateManyUsuarioInput = {
    id_lugar?: number
    pais: string
    provincia: string
  }

  export type ordenCreateManyUsuarioInput = {
    id_item?: number
    numero_orden: number
    id_producto: number
    stock: number
    precio: number
  }

  export type compraCreateManyUsuarioInput = {
    id_compra?: number
    numero_orden: number
    precio_Final: number
    fehca: string
  }

  export type comentarioUpdateWithoutUsuarioInput = {
    comentario?: StringFieldUpdateOperationsInput | string
    publicacion?: publicacionUpdateManyWithoutComentarioNestedInput
  }

  export type comentarioUncheckedUpdateWithoutUsuarioInput = {
    id_comentario?: IntFieldUpdateOperationsInput | number
    comentario?: StringFieldUpdateOperationsInput | string
    publicacion?: publicacionUncheckedUpdateManyWithoutComentarioNestedInput
  }

  export type comentarioUncheckedUpdateManyWithoutUsuarioInput = {
    id_comentario?: IntFieldUpdateOperationsInput | number
    comentario?: StringFieldUpdateOperationsInput | string
  }

  export type lugarUpdateWithoutUsuarioInput = {
    pais?: StringFieldUpdateOperationsInput | string
    provincia?: StringFieldUpdateOperationsInput | string
  }

  export type lugarUncheckedUpdateWithoutUsuarioInput = {
    id_lugar?: IntFieldUpdateOperationsInput | number
    pais?: StringFieldUpdateOperationsInput | string
    provincia?: StringFieldUpdateOperationsInput | string
  }

  export type lugarUncheckedUpdateManyWithoutUsuarioInput = {
    id_lugar?: IntFieldUpdateOperationsInput | number
    pais?: StringFieldUpdateOperationsInput | string
    provincia?: StringFieldUpdateOperationsInput | string
  }

  export type ordenUpdateWithoutUsuarioInput = {
    numero_orden?: IntFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    precio?: FloatFieldUpdateOperationsInput | number
    producto?: productoUpdateOneRequiredWithoutOrdenNestedInput
  }

  export type ordenUncheckedUpdateWithoutUsuarioInput = {
    id_item?: IntFieldUpdateOperationsInput | number
    numero_orden?: IntFieldUpdateOperationsInput | number
    id_producto?: IntFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    precio?: FloatFieldUpdateOperationsInput | number
  }

  export type ordenUncheckedUpdateManyWithoutUsuarioInput = {
    id_item?: IntFieldUpdateOperationsInput | number
    numero_orden?: IntFieldUpdateOperationsInput | number
    id_producto?: IntFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    precio?: FloatFieldUpdateOperationsInput | number
  }

  export type compraUpdateWithoutUsuarioInput = {
    numero_orden?: IntFieldUpdateOperationsInput | number
    precio_Final?: FloatFieldUpdateOperationsInput | number
    fehca?: StringFieldUpdateOperationsInput | string
  }

  export type compraUncheckedUpdateWithoutUsuarioInput = {
    id_compra?: IntFieldUpdateOperationsInput | number
    numero_orden?: IntFieldUpdateOperationsInput | number
    precio_Final?: FloatFieldUpdateOperationsInput | number
    fehca?: StringFieldUpdateOperationsInput | string
  }

  export type compraUncheckedUpdateManyWithoutUsuarioInput = {
    id_compra?: IntFieldUpdateOperationsInput | number
    numero_orden?: IntFieldUpdateOperationsInput | number
    precio_Final?: FloatFieldUpdateOperationsInput | number
    fehca?: StringFieldUpdateOperationsInput | string
  }

  export type publicacionCreateManyComentarioInput = {
    id_publicacion?: number
    titulo: string
    descripcion?: string | null
    foto?: string | null
  }

  export type publicacionUpdateWithoutComentarioInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    foto?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type publicacionUncheckedUpdateWithoutComentarioInput = {
    id_publicacion?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    foto?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type publicacionUncheckedUpdateManyWithoutComentarioInput = {
    id_publicacion?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    foto?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type productoCreateManyCategoriaInput = {
    id_producto?: number
    marca: string
    descripcion: string
    precio: number
    stock: number
    foto?: string
  }

  export type productoUpdateWithoutCategoriaInput = {
    marca?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    foto?: StringFieldUpdateOperationsInput | string
    orden?: ordenUpdateManyWithoutProductoNestedInput
  }

  export type productoUncheckedUpdateWithoutCategoriaInput = {
    id_producto?: IntFieldUpdateOperationsInput | number
    marca?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    foto?: StringFieldUpdateOperationsInput | string
    orden?: ordenUncheckedUpdateManyWithoutProductoNestedInput
  }

  export type productoUncheckedUpdateManyWithoutCategoriaInput = {
    id_producto?: IntFieldUpdateOperationsInput | number
    marca?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    foto?: StringFieldUpdateOperationsInput | string
  }

  export type ordenCreateManyProductoInput = {
    id_item?: number
    numero_orden: number
    id_usuario: number
    stock: number
    precio: number
  }

  export type ordenUpdateWithoutProductoInput = {
    numero_orden?: IntFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    precio?: FloatFieldUpdateOperationsInput | number
    usuario?: usuarioUpdateOneRequiredWithoutOrdenNestedInput
  }

  export type ordenUncheckedUpdateWithoutProductoInput = {
    id_item?: IntFieldUpdateOperationsInput | number
    numero_orden?: IntFieldUpdateOperationsInput | number
    id_usuario?: IntFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    precio?: FloatFieldUpdateOperationsInput | number
  }

  export type ordenUncheckedUpdateManyWithoutProductoInput = {
    id_item?: IntFieldUpdateOperationsInput | number
    numero_orden?: IntFieldUpdateOperationsInput | number
    id_usuario?: IntFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    precio?: FloatFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsuarioCountOutputTypeDefaultArgs instead
     */
    export type UsuarioCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsuarioCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ComentarioCountOutputTypeDefaultArgs instead
     */
    export type ComentarioCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ComentarioCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoriaCountOutputTypeDefaultArgs instead
     */
    export type CategoriaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoriaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductoCountOutputTypeDefaultArgs instead
     */
    export type ProductoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use usuarioDefaultArgs instead
     */
    export type usuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = usuarioDefaultArgs<ExtArgs>
    /**
     * @deprecated Use comentarioDefaultArgs instead
     */
    export type comentarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = comentarioDefaultArgs<ExtArgs>
    /**
     * @deprecated Use lugarDefaultArgs instead
     */
    export type lugarArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = lugarDefaultArgs<ExtArgs>
    /**
     * @deprecated Use categoriaDefaultArgs instead
     */
    export type categoriaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = categoriaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use productoDefaultArgs instead
     */
    export type productoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = productoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use publicacionDefaultArgs instead
     */
    export type publicacionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = publicacionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ordenDefaultArgs instead
     */
    export type ordenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ordenDefaultArgs<ExtArgs>
    /**
     * @deprecated Use compraDefaultArgs instead
     */
    export type compraArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = compraDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}